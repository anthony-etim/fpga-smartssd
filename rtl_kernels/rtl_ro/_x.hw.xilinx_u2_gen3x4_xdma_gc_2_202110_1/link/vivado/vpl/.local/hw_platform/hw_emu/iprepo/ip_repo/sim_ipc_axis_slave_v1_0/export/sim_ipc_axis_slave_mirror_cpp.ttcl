<: setOutputDirectory "export" :>
<: setFileName [current_instname]_mirror :>
<: set CompName [getFileName ] :>
<: setFileExtension ".cpp.user" :>
<: set tDataWidth [get_property PARAM_VALUE.C_S00_AXIS_TDATA_WIDTH] :>
<: set tDataWidthDiv8 [expr { $tDataWidth/8 }] :>
<: set IfDef IP_[string toupper $CompName ]_H :>
// (c) Copyright 1995-2021 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
// 
// DO NOT MODIFY THIS FILE.

#include "<: print $CompName :>.h"

<: print $CompName :>::<: print $CompName :>(const sc_core::sc_module_name& nm) :
  sc_core::sc_module(nm)
  ,mp_impl(NULL)
  ,m_axis_aclk("m_axis_aclk")
  ,m_axis_aresetn("m_axis_aresetn")
  ,m_axis_tvalid("m_axis_tvalid")
  ,m_axis_tready("m_axis_tready")
  ,m_axis_tdata("m_axis_tdata")
  ,m_axis_tstrb("m_axis_tstrb")
  ,m_axis_tkeep("m_axis_tkeep")
  ,m_axis_tlast("m_axis_tlast")
  ,m_axis_tid("m_axis_tid")
  ,m_axis_tdest("m_axis_tdest")
  ,m_axis_tuser("m_axis_tuser")
{
  // initialize module
  xsc::common_cpp::properties model_param_props;
  model_param_props.addLong("C_M00_AXIS_TDATA_WIDTH", "<: print $tDataWidth :>");
  mp_impl = new sim_ipc_axis_master("inst", model_param_props);

  // initialize pins
  mp_impl->m00_axis_aclk(m_axis_aclk);
  mp_impl->m00_axis_aresetn(m_axis_aresetn);

  // initialize AXI sockets
  M_AXIS_socket = mp_impl->M00_AXIS_socket;

  // initialize transactors
  mp_M_AXIS_transactor = NULL;
  mp_m_axis_tlast_converter = NULL;
  mp_m_axis_tready_converter = NULL;
  mp_m_axis_tvalid_converter = NULL;
}

void <: print $CompName :>::before_end_of_elaboration()
{
  // configure 'M_AXIS' transactor

  // 'M_AXIS' transactor parameters
    xsc::common_cpp::properties M_AXIS_transactor_param_props;
    M_AXIS_transactor_param_props.addLong("TDATA_NUM_BYTES", "<: print $tDataWidthDiv8 :>");
    M_AXIS_transactor_param_props.addLong("TDEST_WIDTH", "1");
    M_AXIS_transactor_param_props.addLong("TID_WIDTH", "1");
    M_AXIS_transactor_param_props.addLong("TUSER_WIDTH", "<: print $tDataWidth :>");
    M_AXIS_transactor_param_props.addLong("HAS_TREADY", "1");
    M_AXIS_transactor_param_props.addLong("HAS_TSTRB", "1");
    M_AXIS_transactor_param_props.addLong("HAS_TKEEP", "1");
    M_AXIS_transactor_param_props.addLong("HAS_TLAST", "1");
    M_AXIS_transactor_param_props.addLong("FREQ_HZ", "300000000");
    M_AXIS_transactor_param_props.addLong("HAS_RESET", "1");
    M_AXIS_transactor_param_props.addFloat("PHASE", "0.000");
    M_AXIS_transactor_param_props.addString("CLK_DOMAIN", "emu_kernel_clk_1_clk");
    M_AXIS_transactor_param_props.addString("LAYERED_METADATA", "undef");
    M_AXIS_transactor_param_props.addLong("TSIDE_BAND_1_WIDTH", "0");
    M_AXIS_transactor_param_props.addLong("TSIDE_BAND_2_WIDTH", "0");

    mp_M_AXIS_transactor = new xtlm::xaxis_xtlm2pin_t<<: print $tDataWidthDiv8 :>,<: print $tDataWidth :>,1,1,1,1>("M_AXIS_transactor", M_AXIS_transactor_param_props);

    // M_AXIS' transactor ports
    mp_M_AXIS_transactor->CLK(m_axis_aclk);
    mp_M_AXIS_transactor->RST(m_axis_aresetn);

    mp_m_axis_tvalid_converter = new xsc::common::scalar2vectorN_converter<1>("m_axis_tvalid_converter");
    mp_m_axis_tvalid_converter->scalar_in(m_m_axis_tvalid_converter_signal);
    mp_m_axis_tvalid_converter->vector_out(m_axis_tvalid);
    mp_M_AXIS_transactor->TVALID(m_m_axis_tvalid_converter_signal);

    mp_m_axis_tready_converter = new xsc::common::vectorN2scalar_converter<1>("m_axis_tready_converter");
    mp_m_axis_tready_converter->vector_in(m_axis_tready);
    mp_m_axis_tready_converter->scalar_out(m_m_axis_tready_converter_signal);
    mp_M_AXIS_transactor->TREADY(m_m_axis_tready_converter_signal);

    mp_M_AXIS_transactor->TDATA(m_axis_tdata);
    mp_M_AXIS_transactor->TSTRB(m_axis_tstrb);
    mp_M_AXIS_transactor->TKEEP(m_axis_tkeep);

    mp_m_axis_tlast_converter = new xsc::common::scalar2vectorN_converter<1>("m_axis_tlast_converter");
    mp_m_axis_tlast_converter->scalar_in(m_m_axis_tlast_converter_signal);
    mp_m_axis_tlast_converter->vector_out(m_axis_tlast);
    mp_M_AXIS_transactor->TLAST(m_m_axis_tlast_converter_signal);

    mp_M_AXIS_transactor->TID(m_axis_tid);
    mp_M_AXIS_transactor->TDEST(m_axis_tdest);
    mp_M_AXIS_transactor->TUSER(m_axis_tuser);

    // M_AXIS' transactor sockets
    mp_impl->M00_AXIS_socket->bind(*(mp_M_AXIS_transactor->socket));
}

<: print $CompName :>::~<: print $CompName :>()
{
  delete mp_M_AXIS_transactor;
  delete mp_m_axis_tlast_converter;
  delete mp_m_axis_tready_converter;
  delete mp_m_axis_tvalid_converter;
  delete mp_impl;
}

