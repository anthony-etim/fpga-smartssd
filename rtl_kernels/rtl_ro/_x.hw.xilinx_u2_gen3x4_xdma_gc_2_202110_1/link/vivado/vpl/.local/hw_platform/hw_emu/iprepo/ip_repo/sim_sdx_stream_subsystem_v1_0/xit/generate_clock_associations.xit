# d52cbaca0ef8cf4fd3d6354deb5066970fb6511d02d18d15835e6014ed847fb0
# (c) Copyright 2018 Xilinx, Inc. All rights reserved.
#
# This file contains confidential and proprietary information
# of Xilinx, Inc. and is protected under U.S. and
# international copyright and other intellectual property
# laws.
#
# DISCLAIMER
# This disclaimer is not a license and does not grant any
# rights to the materials distributed herewith. Except as
# otherwise provided in a valid license issued to you by
# Xilinx, and to the maximum extent permitted by applicable
# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
# (2) Xilinx shall not be liable (whether in contract or tort,
# including negligence, or under any other theory of
# liability) for any loss or damage of any kind or nature
# related to, arising under or in connection with these
# materials, including for any direct, or any indirect,
# special, incidental, or consequential loss or damage
# (including loss of data, profits, goodwill, or any type of
# loss or damage suffered as a result of any action brought
# by a third party) even if such damage or loss was
# reasonably foreseeable or Xilinx had been advised of the
# possibility of the same.
#
# CRITICAL APPLICATIONS
# Xilinx products are not designed or intended to be fail-
# safe, or for use in any application requiring fail-safe
# performance, such as life-support or safety devices or
# systems, Class III medical devices, nuclear facilities,
# applications related to the deployment of airbags, or any
# other applications that could lead to death, personal
# injury, or severe property or environmental damage
# (individually and collectively, "Critical
# Applications"). Customer assumes the sole risk and
# liability of any use of Xilinx products in Critical
# Applications, subject only to applicable laws and
# regulations governing limitations on product liability.
#
# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
# PART OF THIS FILE AT ALL TIMES.
############################################################
dbg_puts "----------------------------------------------------------------------"
dbg_puts "BEGIN: GENERATE_CLOCK_ASSOCIATIONS"

# ----------------------------------------------------------------------
# Automate clock associations
#
# Determine which aclk input is used by each of the *_AXI* interfaces

foreach clock_port [get_bd_ports aclk*] {
  set clock_key [get_clock_key $clock_port]
  dbg_puts "set clock keys: $clock_port: $clock_key"
  dict set clock_definitions [get_property NAME $clock_port] $clock_key
  dict set clock_key_map $clock_key $clock_port  
}

dbg_puts "clock_definitions: $clock_definitions"
dbg_puts "clock_key_map: $clock_key_map"

dict set CONFIG si_clk_keys_info [get_si_clk_keys_info]
foreach si [get_bd_intf_ports -filter {VLNV==xilinx.com:interface:axis_rtl:1.0}] {
  set si_name [get_property NAME $si]
  dbg_puts "Processing: $si_name"

  if {[dict exists $CONFIG si_clk_keys_info $si_name]} {
    set clock_key [dict get $CONFIG si_clk_keys_info [get_property NAME $si]]
    dbg_puts "  Clock Key: $clock_key"

    set clock_source [dict get $clock_key_map $clock_key]
    regexp {(\d\d)} $si {} idx

    set clock_port_name [get_property NAME $clock_source]
    set si_name [get_property NAME $si]

    if {![dict exists $clock_associations $si_name]} {
      dict set clock_associations $si_name $clock_port_name
      dict lappend clock_associations $clock_port_name $si_name
    } else {
      dbg_puts "$si_name is synchronous to $clock_port_name but was already associated to [dict get $clock_associations $si_name].  Probable repeat connection of same clock source to different aclk inputs"
    }

  } else {
    dbg_puts "No clock association was found for $si_name - is the port connected?"
  }

}

foreach clock_port [get_bd_ports -filter {type==clk}] {
  set clock_port_name [get_property NAME $clock_port]
  set associated_busifs {}
  if {[dict exists $clock_associations $clock_port_name]} {
    set clock_port_associations [dict get $clock_associations $clock_port_name]
    set si_ports [lsearch -all -inline -glob $clock_port_associations {*_AXI*}]
    set associated_busifs [join $si_ports :]
  }
  dbg_puts "Updating associated clocks on $clock_port to: $associated_busifs"
  set_property CONFIG.ASSOCIATED_BUSIF $associated_busifs $clock_port
  dbg_puts "Readback: [get_property CONFIG.ASSOCIATED_BUSIF $clock_port]"
}

dbg_puts "clock_associations: $clock_associations"
dbg_puts "clock_definitions: $clock_definitions"

dbg_puts "END: GENERATE_CLOCK_ASSOCIATIONS"
dbg_puts "----------------------------------------------------------------------"
