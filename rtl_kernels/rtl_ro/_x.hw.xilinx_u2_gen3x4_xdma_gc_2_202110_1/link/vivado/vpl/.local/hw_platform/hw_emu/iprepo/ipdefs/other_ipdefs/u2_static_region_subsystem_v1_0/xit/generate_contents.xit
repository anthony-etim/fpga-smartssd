############################################################################################################################################
#
# (c) Copyright 2019 Xilinx, Inc. All rights reserved.
#
# This file contains confidential and proprietary information
# of Xilinx, Inc. and is protected under U.S. and
# international copyright and other intellectual property
# laws.
#
# DISCLAIMER
# This disclaimer is not a license and does not grant any
# rights to the materials distributed herewith. Except as
# otherwise provided in a valid license issued to you by
# Xilinx, and to the maximum extent permitted by applicable
# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
# (2) Xilinx shall not be liable (whether in contract or tort,
# including negligence, or under any other theory of
# liability) for any loss or damage of any kind or nature
# related to, arising under or in connection with these
# materials, including for any direct, or any indirect,
# special, incidental, or consequential loss or damage
# (including loss of data, profits, goodwill, or any type of
# loss or damage suffered as a result of any action brought
# by a third party) even if such damage or loss was
# reasonably foreseeable or Xilinx had been advised of the
# possibility of the same.
#
# CRITICAL APPLICATIONS
# Xilinx products are not designed or intended to be fail-
# safe, or for use in any application requiring fail-safe
# performance, such as life-support or safety devices or
# systems, Class III medical devices, nuclear facilities,
# applications related to the deployment of airbags, or any
# other applications that could lead to death, personal
# injury, or severe property or environmental damage
# (individually and collectively, "Critical
# Applications"). Customer assumes the sole risk and
# liability of any use of Xilinx products in Critical
# Applications, subject only to applicable laws and
# regulations governing limitations on product liability.
#
# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
# PART OF THIS FILE AT ALL TIMES.
############################################################
#
############################################################################################################################################
source_ipfile xit/get_params.xit
##################################################################
# DESIGN PROCs
##################################################################
# Hierarchical cell: microblaze_scheduler_lm
proc create_hier_cell_microblaze_scheduler_lm { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_microblaze_scheduler_lm() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 DLMB

  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 ILMB

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:bram_rtl:1.0 scheduler_bram_ctrl_BRAM_PORTA


  # Create pins
  create_bd_pin -dir I -type clk LMB_Clk
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: dlmb_v10, and set properties
  set dlmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10 dlmb_v10 ]

  # Create instance: ilmb_v10, and set properties
  set ilmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10 ilmb_v10 ]

  # Create instance: lmb_bram, and set properties
  set lmb_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen lmb_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.use_bram_block {BRAM_Controller} \
 ] $lmb_bram

  # Create instance: lmb_bram_if_cntlr, and set properties
  set lmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr lmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
   CONFIG.C_NUM_LMB {2} \
 ] $lmb_bram_if_cntlr

  # Create interface connections
  connect_bd_intf_net -intf_net Conn [get_bd_intf_pins ilmb_v10/LMB_Sl_0] [get_bd_intf_pins lmb_bram_if_cntlr/SLMB1]
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins scheduler_bram_ctrl_BRAM_PORTA] [get_bd_intf_pins lmb_bram/BRAM_PORTB]
  connect_bd_intf_net -intf_net microblaze_0_dlmb [get_bd_intf_pins DLMB] [get_bd_intf_pins dlmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_bus [get_bd_intf_pins dlmb_v10/LMB_Sl_0] [get_bd_intf_pins lmb_bram_if_cntlr/SLMB]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_cntlr [get_bd_intf_pins lmb_bram/BRAM_PORTA] [get_bd_intf_pins lmb_bram_if_cntlr/BRAM_PORT]
  connect_bd_intf_net -intf_net microblaze_0_ilmb [get_bd_intf_pins ILMB] [get_bd_intf_pins ilmb_v10/LMB_M]

  # Create port connections
  connect_bd_net -net SYS_Rst_1 [get_bd_pins SYS_Rst] [get_bd_pins dlmb_v10/SYS_Rst] [get_bd_pins ilmb_v10/SYS_Rst] [get_bd_pins lmb_bram_if_cntlr/LMB_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins LMB_Clk] [get_bd_pins dlmb_v10/LMB_Clk] [get_bd_pins ilmb_v10/LMB_Clk] [get_bd_pins lmb_bram_if_cntlr/LMB_Clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: microblaze_0_local_memory
proc create_hier_cell_microblaze_0_local_memory { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_microblaze_0_local_memory() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 DLMB

  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 ILMB

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:bram_rtl:1.0 mb_bram_ctrl_BRAM_PORTA


  # Create pins
  create_bd_pin -dir I -type clk LMB_Clk
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: dlmb_v10, and set properties
  set dlmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10 dlmb_v10 ]

  # Create instance: ilmb_v10, and set properties
  set ilmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10 ilmb_v10 ]

  # Create instance: lmb_bram, and set properties
  set lmb_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen lmb_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.use_bram_block {BRAM_Controller} \
 ] $lmb_bram

  # Create instance: lmb_bram_if_cntlr, and set properties
  set lmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr lmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
   CONFIG.C_NUM_LMB {2} \
 ] $lmb_bram_if_cntlr

  # Create interface connections
  connect_bd_intf_net -intf_net Conn [get_bd_intf_pins ilmb_v10/LMB_Sl_0] [get_bd_intf_pins lmb_bram_if_cntlr/SLMB1]
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins mb_bram_ctrl_BRAM_PORTA] [get_bd_intf_pins lmb_bram/BRAM_PORTB]
  connect_bd_intf_net -intf_net microblaze_0_dlmb [get_bd_intf_pins DLMB] [get_bd_intf_pins dlmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_bus [get_bd_intf_pins dlmb_v10/LMB_Sl_0] [get_bd_intf_pins lmb_bram_if_cntlr/SLMB]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_cntlr [get_bd_intf_pins lmb_bram/BRAM_PORTA] [get_bd_intf_pins lmb_bram_if_cntlr/BRAM_PORT]
  connect_bd_intf_net -intf_net microblaze_0_ilmb [get_bd_intf_pins ILMB] [get_bd_intf_pins ilmb_v10/LMB_M]

  # Create port connections
  connect_bd_net -net SYS_Rst_1 [get_bd_pins SYS_Rst] [get_bd_pins dlmb_v10/SYS_Rst] [get_bd_pins ilmb_v10/SYS_Rst] [get_bd_pins lmb_bram_if_cntlr/LMB_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins LMB_Clk] [get_bd_pins dlmb_v10/LMB_Clk] [get_bd_pins ilmb_v10/LMB_Clk] [get_bd_pins lmb_bram_if_cntlr/LMB_Clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: embedded_schduler
proc create_hier_cell_embedded_schduler { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_embedded_schduler() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:mbdebug_rtl:3.0 DEBUG

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 embedded_scheduler_M00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 embedded_scheduler_M03_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 embedded_scheduler_M04_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_user_M03_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 mb_bdmgmt_M02_AXI


  # Create pins
  create_bd_pin -dir I -from 0 -to 0 In0
  create_bd_pin -dir I -from 0 -to 0 In1
  create_bd_pin -dir I -type rst aux_reset_in
  create_bd_pin -dir I clkwiz_schdeuler_locked
  create_bd_pin -dir I -type clk clkwiz_schduler_clk_out1
  create_bd_pin -dir I -type clk clkwiz_sysclks_clk_out2
  create_bd_pin -dir I -type rst mb_debug_sys_rst
  create_bd_pin -dir I -type rst psreset_ctrlclk_interconnect_aresetn
  create_bd_pin -dir O -from 0 -to 0 -type rst s_axi_aresetn

  # Create instance: axi_bram_ctrl_0_bram, and set properties
  set axi_bram_ctrl_0_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen axi_bram_ctrl_0_bram ]

  # Create instance: axi_intc_0, and set properties
  set axi_intc_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc axi_intc_0 ]
  set_property -dict [ list \
   CONFIG.C_HAS_FAST {1} \
   CONFIG.C_KIND_OF_INTR {0xFFFFFFFC} \
   CONFIG.C_KIND_OF_LVL {0xFFFFFFFF} \
 ] $axi_intc_0

  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_interconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
 ] $axi_interconnect_0

  # Create instance: cq_bram_ctlr, and set properties
  set cq_bram_ctlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl cq_bram_ctlr ]
  set_property -dict [ list \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $cq_bram_ctlr

  # Create instance: interconnect_axilite_scheduler_microblaze, and set properties
  set interconnect_axilite_scheduler_microblaze [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_scheduler_microblaze ]
  set_property -dict [ list \
   CONFIG.NUM_MI {5} \
 ] $interconnect_axilite_scheduler_microblaze

  # Create instance: microblaze_scheduler, and set properties
  set microblaze_scheduler [ create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze microblaze_scheduler ]
  set_property -dict [ list \
   CONFIG.C_D_AXI {1} \
   CONFIG.C_USE_BARREL {0} \
   CONFIG.C_USE_DIV {0} \
 ] $microblaze_scheduler

  # Create instance: microblaze_scheduler_lm
  create_hier_cell_microblaze_scheduler_lm $hier_obj microblaze_scheduler_lm

  # Create instance: psreset_scheduler, and set properties
  set psreset_scheduler [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_scheduler ]

  # Create instance: scheduler_bram_ctrl, and set properties
  set scheduler_bram_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl scheduler_bram_ctrl ]
  set_property -dict [ list \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $scheduler_bram_ctrl

  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat xlconcat_0 ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {2} \
 ] $xlconcat_0

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins interconnect_axilite_static_user_M03_AXI] [get_bd_intf_pins axi_interconnect_0/S01_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins embedded_scheduler_M04_AXI] [get_bd_intf_pins interconnect_axilite_scheduler_microblaze/M04_AXI]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0_bram/BRAM_PORTA] [get_bd_intf_pins cq_bram_ctlr/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_intc_0_interrupt [get_bd_intf_pins axi_intc_0/interrupt] [get_bd_intf_pins microblaze_scheduler/INTERRUPT]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins embedded_scheduler_M00_AXI] [get_bd_intf_pins interconnect_axilite_scheduler_microblaze/M00_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI1 [get_bd_intf_pins axi_interconnect_0/M00_AXI] [get_bd_intf_pins cq_bram_ctlr/S_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_bram_M02_AXI [get_bd_intf_pins mb_bdmgmt_M02_AXI] [get_bd_intf_pins scheduler_bram_ctrl/S_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_scheduler_microblaze_M01_AXI [get_bd_intf_pins axi_intc_0/s_axi] [get_bd_intf_pins interconnect_axilite_scheduler_microblaze/M01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_scheduler_microblaze_M02_AXI [get_bd_intf_pins embedded_scheduler_M03_AXI] [get_bd_intf_pins interconnect_axilite_scheduler_microblaze/M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_scheduler_microblaze_M03_AXI [get_bd_intf_pins axi_interconnect_0/S00_AXI] [get_bd_intf_pins interconnect_axilite_scheduler_microblaze/M03_AXI]
  connect_bd_intf_net -intf_net mdm_board_control_MBDEBUG_1 [get_bd_intf_pins DEBUG] [get_bd_intf_pins microblaze_scheduler/DEBUG]
  connect_bd_intf_net -intf_net microblaze_scheduler_DLMB [get_bd_intf_pins microblaze_scheduler/DLMB] [get_bd_intf_pins microblaze_scheduler_lm/DLMB]
  connect_bd_intf_net -intf_net microblaze_scheduler_ILMB [get_bd_intf_pins microblaze_scheduler/ILMB] [get_bd_intf_pins microblaze_scheduler_lm/ILMB]
  connect_bd_intf_net -intf_net microblaze_scheduler_M_AXI_DP [get_bd_intf_pins interconnect_axilite_scheduler_microblaze/S00_AXI] [get_bd_intf_pins microblaze_scheduler/M_AXI_DP]
  connect_bd_intf_net -intf_net schduler_bram_ctrl_BRAM_PORTA [get_bd_intf_pins microblaze_scheduler_lm/scheduler_bram_ctrl_BRAM_PORTA] [get_bd_intf_pins scheduler_bram_ctrl/BRAM_PORTA]

  # Create port connections
  connect_bd_net -net In0_1 [get_bd_pins In0] [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net In1_1 [get_bd_pins In1] [get_bd_pins xlconcat_0/In1]
  connect_bd_net -net axi_gpio_mb_ctrl_gpio_io_o [get_bd_pins aux_reset_in] [get_bd_pins psreset_scheduler/aux_reset_in]
  connect_bd_net -net clkwiz_schdeuler_locked_1 [get_bd_pins clkwiz_schdeuler_locked] [get_bd_pins psreset_scheduler/dcm_locked]
  connect_bd_net -net clkwiz_sysclks_clk_out2_1 [get_bd_pins clkwiz_sysclks_clk_out2] [get_bd_pins interconnect_axilite_scheduler_microblaze/M02_ACLK] [get_bd_pins scheduler_bram_ctrl/s_axi_aclk]
  connect_bd_net -net ext_reset_in_1 [get_bd_pins psreset_ctrlclk_interconnect_aresetn] [get_bd_pins interconnect_axilite_scheduler_microblaze/M02_ARESETN] [get_bd_pins psreset_scheduler/ext_reset_in] [get_bd_pins scheduler_bram_ctrl/s_axi_aresetn]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins mb_debug_sys_rst] [get_bd_pins psreset_scheduler/mb_debug_sys_rst]
  connect_bd_net -net psreset_scheduler_bus_struct_reset [get_bd_pins microblaze_scheduler_lm/SYS_Rst] [get_bd_pins psreset_scheduler/bus_struct_reset]
  connect_bd_net -net psreset_scheduler_interconnect_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_intc_0/s_axi_aresetn] [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_interconnect_0/S01_ARESETN] [get_bd_pins cq_bram_ctlr/s_axi_aresetn] [get_bd_pins interconnect_axilite_scheduler_microblaze/ARESETN] [get_bd_pins interconnect_axilite_scheduler_microblaze/M00_ARESETN] [get_bd_pins interconnect_axilite_scheduler_microblaze/M01_ARESETN] [get_bd_pins interconnect_axilite_scheduler_microblaze/M03_ARESETN] [get_bd_pins interconnect_axilite_scheduler_microblaze/M04_ARESETN] [get_bd_pins interconnect_axilite_scheduler_microblaze/S00_ARESETN] [get_bd_pins psreset_scheduler/interconnect_aresetn]
  connect_bd_net -net psreset_scheduler_mb_reset [get_bd_pins axi_intc_0/processor_rst] [get_bd_pins microblaze_scheduler/Reset] [get_bd_pins psreset_scheduler/mb_reset]
  connect_bd_net -net slowest_sync_clk_1 [get_bd_pins clkwiz_schduler_clk_out1] [get_bd_pins axi_intc_0/processor_clk] [get_bd_pins axi_intc_0/s_axi_aclk] [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_interconnect_0/S01_ACLK] [get_bd_pins cq_bram_ctlr/s_axi_aclk] [get_bd_pins interconnect_axilite_scheduler_microblaze/ACLK] [get_bd_pins interconnect_axilite_scheduler_microblaze/M00_ACLK] [get_bd_pins interconnect_axilite_scheduler_microblaze/M01_ACLK] [get_bd_pins interconnect_axilite_scheduler_microblaze/M03_ACLK] [get_bd_pins interconnect_axilite_scheduler_microblaze/M04_ACLK] [get_bd_pins interconnect_axilite_scheduler_microblaze/S00_ACLK] [get_bd_pins microblaze_scheduler/Clk] [get_bd_pins microblaze_scheduler_lm/LMB_Clk] [get_bd_pins psreset_scheduler/slowest_sync_clk]
  connect_bd_net -net xlconcat_0_dout [get_bd_pins axi_intc_0/intr] [get_bd_pins xlconcat_0/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: board_management
proc create_hier_cell_board_management { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_board_management() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:mbdebug_rtl:3.0 DEBUG

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M06_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S00_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S00_AXI1

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:uart_rtl:1.0 bmc_uart

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 iic

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_secondary_b_M04_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 mb_bdmgmt_M00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 mb_bdmgmt_M01_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 mb_bdmgmt_M02_AXI


  # Create pins
  create_bd_pin -dir I -from 0 -to 0 HWICAP_intr
  create_bd_pin -dir I -from 5 -to 0 In0
  create_bd_pin -dir I -from 0 -to 0 In12
  create_bd_pin -dir I -from 0 -to 0 MDM_intr
  create_bd_pin -dir I -from 0 -to 0 Op2
  create_bd_pin -dir I -from 0 -to 0 QSPI_intr
  create_bd_pin -dir I -type rst S00_ARESETN
  create_bd_pin -dir O -from 0 -to 0 -type rst aux_reset_in
  create_bd_pin -dir O -from 0 -to 0 board_i2c_ctrl_gpo
  create_bd_pin -dir I -type clk clkwiz_sysclks_clk_out2
  create_bd_pin -dir I -type clk clkwiz_sysclks_clk_out3
  create_bd_pin -dir I dcm_locked
  create_bd_pin -dir I dcm_locked1
  create_bd_pin -dir O -from 0 -to 0 gpio2_io_o
  create_bd_pin -dir O -from 0 -to 0 gpio_io_o
  create_bd_pin -dir I -from 0 -to 0 iob_static_perst_n_out
  create_bd_pin -dir I -type rst mb_debug_sys_rst
  create_bd_pin -dir O -from 0 -to 0 -type rst peripheral_aresetn
  create_bd_pin -dir I -type rst psreset_ctrlclk_interconnect_aresetn
  create_bd_pin -dir I -type clk s_axi_aclk

  # Create instance: axi_gpio_mb_ctrl, and set properties
  set axi_gpio_mb_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio axi_gpio_mb_ctrl ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_DOUT_DEFAULT {0x00000001} \
   CONFIG.C_GPIO_WIDTH {1} \
 ] $axi_gpio_mb_ctrl

  # Create instance: axi_gpio_wdt, and set properties
  set axi_gpio_wdt [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio axi_gpio_wdt ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_ALL_OUTPUTS_2 {1} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_IS_DUAL {1} \
 ] $axi_gpio_wdt

  # Create instance: axi_intc_0, and set properties
  set axi_intc_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_intc axi_intc_0 ]
  set_property -dict [ list \
   CONFIG.C_HAS_FAST {1} \
   CONFIG.C_KIND_OF_EDGE {0xFFFEFFFF} \
   CONFIG.C_KIND_OF_INTR {0x00010240} \
 ] $axi_intc_0

  # Create instance: axi_mb_interrupts, and set properties
  set axi_mb_interrupts [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio axi_mb_interrupts ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS_2 {1} \
   CONFIG.C_GPIO2_WIDTH {1} \
   CONFIG.C_GPIO_WIDTH {1} \
   CONFIG.C_IS_DUAL {1} \
 ] $axi_mb_interrupts

  # Create instance: axi_timebase_wdt, and set properties
  set axi_timebase_wdt [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_timebase_wdt axi_timebase_wdt ]
  set_property -dict [ list \
   CONFIG.C_WDT_INTERVAL {31} \
 ] $axi_timebase_wdt

  # Create instance: axi_uartlite_0, and set properties
  set axi_uartlite_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_uartlite axi_uartlite_0 ]
  set_property -dict [ list \
   CONFIG.C_BAUDRATE {115200} \
   CONFIG.C_USE_PARITY {1} \
   CONFIG.PARITY {Even} \
   CONFIG.UARTLITE_BOARD_INTERFACE {Custom} \
 ] $axi_uartlite_0

  # Create instance: axi_vip_0, and set properties
  set axi_vip_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_vip axi_vip_0 ]
  set_property -dict [ list \
   CONFIG.INTERFACE_MODE {SLAVE} \
 ] $axi_vip_0

  # Create instance: board_i2c_ctrl, and set properties
  set board_i2c_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_iic board_i2c_ctrl ]
  set_property -dict [ list \
   CONFIG.C_DEFAULT_VALUE {0x01} \
   CONFIG.IIC_FREQ_KHZ {400} \
 ] $board_i2c_ctrl

  # Create instance: interconnect_axilite_microblaze, and set properties
  set interconnect_axilite_microblaze [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_microblaze ]
  set_property -dict [ list \
   CONFIG.NUM_MI {8} \
 ] $interconnect_axilite_microblaze

  # Create instance: interconnect_axilite_microblaze_bram, and set properties
  set interconnect_axilite_microblaze_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_microblaze_bram ]
  set_property -dict [ list \
   CONFIG.NUM_MI {3} \
 ] $interconnect_axilite_microblaze_bram

  # Create instance: interconnect_axilite_microblaze_periph, and set properties
  set interconnect_axilite_microblaze_periph [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_microblaze_periph ]
  set_property -dict [ list \
   CONFIG.NUM_MI {3} \
   CONFIG.NUM_SI {1} \
 ] $interconnect_axilite_microblaze_periph

  # Create instance: interconnect_axilite_static_secondary_a3, and set properties
  set interconnect_axilite_static_secondary_a3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_a3 ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_a3

  # Create instance: mb_bram_ctrl, and set properties
  set mb_bram_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl mb_bram_ctrl ]
  set_property -dict [ list \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $mb_bram_ctrl

  # Create instance: microblaze_0_local_memory
  create_hier_cell_microblaze_0_local_memory $hier_obj microblaze_0_local_memory

  # Create instance: microblaze_board_control, and set properties
  set microblaze_board_control [ create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze microblaze_board_control ]
  set_property -dict [ list \
   CONFIG.C_CACHE_BYTE_SIZE {8192} \
   CONFIG.C_DCACHE_BYTE_SIZE {8192} \
   CONFIG.C_DEBUG_ENABLED {1} \
   CONFIG.C_D_AXI {1} \
   CONFIG.C_D_LMB {1} \
   CONFIG.C_FSL_LINKS {1} \
   CONFIG.C_I_LMB {1} \
   CONFIG.C_USE_BARREL {1} \
   CONFIG.C_USE_DCACHE {0} \
   CONFIG.C_USE_DIV {1} \
   CONFIG.C_USE_HW_MUL {2} \
   CONFIG.C_USE_ICACHE {0} \
   CONFIG.C_USE_MSR_INSTR {1} \
   CONFIG.C_USE_PCMP_INSTR {1} \
 ] $microblaze_board_control

  # Create instance: psreset_board_control, and set properties
  set psreset_board_control [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_board_control ]

  # Create instance: psreset_board_control1, and set properties
  set psreset_board_control1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_board_control1 ]

  # Create instance: psreset_board_control_prstn, and set properties
  set psreset_board_control_prstn [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_board_control_prstn ]

  # Create instance: register_map_bram, and set properties
  set register_map_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen register_map_bram ]

  # Create instance: register_map_ctrl, and set properties
  set register_map_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl register_map_ctrl ]
  set_property -dict [ list \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $register_map_ctrl

  # Create instance: reset_wdt, and set properties
  set reset_wdt [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset reset_wdt ]

  # Create instance: util_vector_logic_0, and set properties
  set util_vector_logic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic util_vector_logic_0 ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {or} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_orgate.png} \
 ] $util_vector_logic_0

  # Create instance: util_vector_logic_1, and set properties
  set util_vector_logic_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic util_vector_logic_1 ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {and} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_andgate.png} \
 ] $util_vector_logic_1

  # Create instance: util_vector_logic_2, and set properties
  set util_vector_logic_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic util_vector_logic_2 ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {and} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_andgate.png} \
 ] $util_vector_logic_2

  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat xlconcat_0 ]
  set_property -dict [ list \
   CONFIG.IN0_WIDTH {6} \
   CONFIG.NUM_PORTS {13} \
 ] $xlconcat_0

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant xlconstant_0 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_0

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins mb_bdmgmt_M01_AXI] [get_bd_intf_pins interconnect_axilite_microblaze/M01_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins iic] [get_bd_intf_pins board_i2c_ctrl/IIC]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins interconnect_axilite_static_secondary_b_M04_AXI] [get_bd_intf_pins interconnect_axilite_microblaze_bram/S00_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins bmc_uart] [get_bd_intf_pins axi_uartlite_0/UART]
  connect_bd_intf_net -intf_net Conn5 [get_bd_intf_pins M06_AXI] [get_bd_intf_pins interconnect_axilite_microblaze/M06_AXI]
  connect_bd_intf_net -intf_net Conn7 [get_bd_intf_pins S00_AXI1] [get_bd_intf_pins interconnect_axilite_static_secondary_a3/S00_AXI]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins register_map_bram/BRAM_PORTA] [get_bd_intf_pins register_map_ctrl/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_intc_0_interrupt [get_bd_intf_pins axi_intc_0/interrupt] [get_bd_intf_pins microblaze_board_control/INTERRUPT]
  connect_bd_intf_net -intf_net axi_interconnect_1_M00_AXI [get_bd_intf_pins board_i2c_ctrl/S_AXI] [get_bd_intf_pins interconnect_axilite_microblaze_periph/M00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_M00_AXI [get_bd_intf_pins mb_bdmgmt_M00_AXI] [get_bd_intf_pins interconnect_axilite_microblaze/M00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_M02_AXI [get_bd_intf_pins axi_intc_0/s_axi] [get_bd_intf_pins interconnect_axilite_microblaze/M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_M03_AXI [get_bd_intf_pins axi_uartlite_0/S_AXI] [get_bd_intf_pins interconnect_axilite_microblaze/M03_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_M04_AXI [get_bd_intf_pins axi_timebase_wdt/S_AXI] [get_bd_intf_pins interconnect_axilite_microblaze/M04_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_M05_AXI [get_bd_intf_pins axi_gpio_wdt/S_AXI] [get_bd_intf_pins interconnect_axilite_microblaze/M05_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_M07_AXI [get_bd_intf_pins axi_vip_0/S_AXI] [get_bd_intf_pins interconnect_axilite_microblaze/M07_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_bram_M00_AXI [get_bd_intf_pins interconnect_axilite_microblaze_bram/M00_AXI] [get_bd_intf_pins mb_bram_ctrl/S_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_bram_M01_AXI [get_bd_intf_pins axi_gpio_mb_ctrl/S_AXI] [get_bd_intf_pins interconnect_axilite_microblaze_bram/M01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_bram_M02_AXI [get_bd_intf_pins mb_bdmgmt_M02_AXI] [get_bd_intf_pins interconnect_axilite_microblaze_bram/M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_periph_M01_AXI [get_bd_intf_pins interconnect_axilite_microblaze_periph/M01_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a3/S01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_periph_M02_AXI [get_bd_intf_pins axi_mb_interrupts/S_AXI] [get_bd_intf_pins interconnect_axilite_microblaze_periph/M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a3_M00_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a3/M00_AXI] [get_bd_intf_pins register_map_ctrl/S_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_b_M03_AXI_1 [get_bd_intf_pins S00_AXI] [get_bd_intf_pins interconnect_axilite_microblaze_periph/S00_AXI]
  connect_bd_intf_net -intf_net mb_bram_ctrl_BRAM_PORTA [get_bd_intf_pins mb_bram_ctrl/BRAM_PORTA] [get_bd_intf_pins microblaze_0_local_memory/mb_bram_ctrl_BRAM_PORTA]
  connect_bd_intf_net -intf_net microblaze_0_M_AXI_DP [get_bd_intf_pins interconnect_axilite_microblaze/S00_AXI] [get_bd_intf_pins microblaze_board_control/M_AXI_DP]
  connect_bd_intf_net -intf_net microblaze_0_debug [get_bd_intf_pins DEBUG] [get_bd_intf_pins microblaze_board_control/DEBUG]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_1 [get_bd_intf_pins microblaze_0_local_memory/DLMB] [get_bd_intf_pins microblaze_board_control/DLMB]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_1 [get_bd_intf_pins microblaze_0_local_memory/ILMB] [get_bd_intf_pins microblaze_board_control/ILMB]

  # Create port connections
  connect_bd_net -net HWICAP_intr_1 [get_bd_pins HWICAP_intr] [get_bd_pins xlconcat_0/In2]
  connect_bd_net -net In0_1 [get_bd_pins In0] [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net In12_1 [get_bd_pins In12] [get_bd_pins xlconcat_0/In12]
  connect_bd_net -net MDM_intr_1 [get_bd_pins MDM_intr] [get_bd_pins xlconcat_0/In9]
  connect_bd_net -net Op2_1 [get_bd_pins Op2] [get_bd_pins util_vector_logic_2/Op2]
  connect_bd_net -net QSPI_intr_1 [get_bd_pins QSPI_intr] [get_bd_pins xlconcat_0/In8]
  connect_bd_net -net S00_ACLK_1 [get_bd_pins clkwiz_sysclks_clk_out3] [get_bd_pins axi_gpio_mb_ctrl/s_axi_aclk] [get_bd_pins interconnect_axilite_microblaze/M01_ACLK] [get_bd_pins interconnect_axilite_microblaze_bram/ACLK] [get_bd_pins interconnect_axilite_microblaze_bram/M00_ACLK] [get_bd_pins interconnect_axilite_microblaze_bram/M01_ACLK] [get_bd_pins interconnect_axilite_microblaze_bram/M02_ACLK] [get_bd_pins interconnect_axilite_microblaze_bram/S00_ACLK] [get_bd_pins interconnect_axilite_microblaze_periph/S00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a3/S00_ACLK] [get_bd_pins mb_bram_ctrl/s_axi_aclk]
  connect_bd_net -net S00_ARESETN_1 [get_bd_pins S00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a3/S00_ARESETN]
  connect_bd_net -net axi_gpio_0_gpio2_io_o [get_bd_pins gpio2_io_o] [get_bd_pins axi_mb_interrupts/gpio2_io_o]
  connect_bd_net -net axi_gpio_0_gpio_io_o [get_bd_pins gpio_io_o] [get_bd_pins axi_mb_interrupts/gpio_io_o]
  connect_bd_net -net axi_gpio_0_gpio_io_o1 [get_bd_pins axi_gpio_wdt/gpio_io_o] [get_bd_pins axi_timebase_wdt/freeze]
  connect_bd_net -net axi_gpio_mb_ctrl_gpio_io_o [get_bd_pins axi_gpio_mb_ctrl/gpio_io_o] [get_bd_pins util_vector_logic_0/Op1]
  connect_bd_net -net axi_gpio_wdt_gpio2_io_o [get_bd_pins axi_gpio_wdt/gpio2_io_o] [get_bd_pins reset_wdt/aux_reset_in]
  connect_bd_net -net axi_timebase_wdt_wdt_interrupt [get_bd_pins axi_timebase_wdt/wdt_interrupt] [get_bd_pins xlconcat_0/In6]
  connect_bd_net -net axi_timebase_wdt_wdt_reset [get_bd_pins axi_timebase_wdt/wdt_reset] [get_bd_pins util_vector_logic_0/Op2]
  connect_bd_net -net axi_uartlite_0_interrupt [get_bd_pins axi_uartlite_0/interrupt] [get_bd_pins xlconcat_0/In1]
  connect_bd_net -net board_i2c_ctrl_gpo [get_bd_pins board_i2c_ctrl_gpo] [get_bd_pins board_i2c_ctrl/gpo]
  connect_bd_net -net board_i2c_ctrl_iic2intc_irpt [get_bd_pins board_i2c_ctrl/iic2intc_irpt] [get_bd_pins xlconcat_0/In3]
  connect_bd_net -net dcm_locked1_1 [get_bd_pins dcm_locked1] [get_bd_pins psreset_board_control1/dcm_locked]
  connect_bd_net -net dcm_locked_1 [get_bd_pins dcm_locked] [get_bd_pins psreset_board_control/dcm_locked] [get_bd_pins reset_wdt/dcm_locked]
  connect_bd_net -net ext_reset_in_1 [get_bd_pins psreset_ctrlclk_interconnect_aresetn] [get_bd_pins axi_gpio_mb_ctrl/s_axi_aresetn] [get_bd_pins interconnect_axilite_microblaze/M01_ARESETN] [get_bd_pins interconnect_axilite_microblaze_bram/ARESETN] [get_bd_pins interconnect_axilite_microblaze_bram/M00_ARESETN] [get_bd_pins interconnect_axilite_microblaze_bram/M01_ARESETN] [get_bd_pins interconnect_axilite_microblaze_bram/M02_ARESETN] [get_bd_pins interconnect_axilite_microblaze_bram/S00_ARESETN] [get_bd_pins interconnect_axilite_microblaze_periph/S00_ARESETN] [get_bd_pins mb_bram_ctrl/s_axi_aresetn]
  connect_bd_net -net iob_static_perst_n_out_1 [get_bd_pins iob_static_perst_n_out] [get_bd_pins psreset_board_control_prstn/ext_reset_in] [get_bd_pins xlconcat_0/In11]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins mb_debug_sys_rst] [get_bd_pins psreset_board_control/mb_debug_sys_rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins clkwiz_sysclks_clk_out2] [get_bd_pins axi_gpio_wdt/s_axi_aclk] [get_bd_pins axi_intc_0/processor_clk] [get_bd_pins axi_intc_0/s_axi_aclk] [get_bd_pins axi_mb_interrupts/s_axi_aclk] [get_bd_pins axi_timebase_wdt/s_axi_aclk] [get_bd_pins axi_uartlite_0/s_axi_aclk] [get_bd_pins axi_vip_0/aclk] [get_bd_pins board_i2c_ctrl/s_axi_aclk] [get_bd_pins interconnect_axilite_microblaze/ACLK] [get_bd_pins interconnect_axilite_microblaze/M00_ACLK] [get_bd_pins interconnect_axilite_microblaze/M02_ACLK] [get_bd_pins interconnect_axilite_microblaze/M03_ACLK] [get_bd_pins interconnect_axilite_microblaze/M04_ACLK] [get_bd_pins interconnect_axilite_microblaze/M05_ACLK] [get_bd_pins interconnect_axilite_microblaze/M06_ACLK] [get_bd_pins interconnect_axilite_microblaze/M07_ACLK] [get_bd_pins interconnect_axilite_microblaze/S00_ACLK] [get_bd_pins interconnect_axilite_microblaze_periph/ACLK] [get_bd_pins interconnect_axilite_microblaze_periph/M00_ACLK] [get_bd_pins interconnect_axilite_microblaze_periph/M01_ACLK] [get_bd_pins interconnect_axilite_microblaze_periph/M02_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a3/S01_ACLK] [get_bd_pins microblaze_0_local_memory/LMB_Clk] [get_bd_pins microblaze_board_control/Clk] [get_bd_pins psreset_board_control/slowest_sync_clk] [get_bd_pins reset_wdt/slowest_sync_clk]
  connect_bd_net -net psreset_board_control1_peripheral_aresetn [get_bd_pins interconnect_axilite_static_secondary_a3/ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a3/M00_ARESETN] [get_bd_pins psreset_board_control1/peripheral_aresetn] [get_bd_pins register_map_ctrl/s_axi_aresetn]
  connect_bd_net -net psreset_board_control_prstn_peripheral_aresetn [get_bd_pins psreset_board_control_prstn/peripheral_aresetn] [get_bd_pins util_vector_logic_2/Op1]
  connect_bd_net -net reset_wdt_peripheral_aresetn [get_bd_pins axi_timebase_wdt/s_axi_aresetn] [get_bd_pins reset_wdt/peripheral_aresetn]
  connect_bd_net -net rst_pcie_250M_bus_struct_reset [get_bd_pins microblaze_0_local_memory/SYS_Rst] [get_bd_pins psreset_board_control/bus_struct_reset]
  connect_bd_net -net rst_pcie_250M_interconnect_aresetn [get_bd_pins axi_intc_0/s_axi_aresetn] [get_bd_pins axi_mb_interrupts/s_axi_aresetn] [get_bd_pins axi_uartlite_0/s_axi_aresetn] [get_bd_pins axi_vip_0/aresetn] [get_bd_pins interconnect_axilite_microblaze/ARESETN] [get_bd_pins interconnect_axilite_microblaze/M00_ARESETN] [get_bd_pins interconnect_axilite_microblaze/M02_ARESETN] [get_bd_pins interconnect_axilite_microblaze/M03_ARESETN] [get_bd_pins interconnect_axilite_microblaze/M04_ARESETN] [get_bd_pins interconnect_axilite_microblaze/M05_ARESETN] [get_bd_pins interconnect_axilite_microblaze/M06_ARESETN] [get_bd_pins interconnect_axilite_microblaze/M07_ARESETN] [get_bd_pins interconnect_axilite_microblaze/S00_ARESETN] [get_bd_pins interconnect_axilite_microblaze_periph/ARESETN] [get_bd_pins interconnect_axilite_microblaze_periph/M00_ARESETN] [get_bd_pins interconnect_axilite_microblaze_periph/M01_ARESETN] [get_bd_pins interconnect_axilite_microblaze_periph/M02_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a3/S01_ARESETN] [get_bd_pins psreset_board_control/interconnect_aresetn]
  connect_bd_net -net rst_pcie_250M_mb_reset [get_bd_pins axi_intc_0/processor_rst] [get_bd_pins microblaze_board_control/Reset] [get_bd_pins psreset_board_control/mb_reset]
  connect_bd_net -net rst_pcie_250M_peripheral_aresetn [get_bd_pins peripheral_aresetn] [get_bd_pins axi_gpio_wdt/s_axi_aresetn] [get_bd_pins board_i2c_ctrl/s_axi_aresetn] [get_bd_pins psreset_board_control/peripheral_aresetn]
  connect_bd_net -net s_axi_aclk_1 [get_bd_pins s_axi_aclk] [get_bd_pins interconnect_axilite_static_secondary_a3/ACLK] [get_bd_pins interconnect_axilite_static_secondary_a3/M00_ACLK] [get_bd_pins psreset_board_control1/slowest_sync_clk] [get_bd_pins psreset_board_control_prstn/slowest_sync_clk] [get_bd_pins register_map_ctrl/s_axi_aclk]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_pins aux_reset_in] [get_bd_pins psreset_board_control/ext_reset_in] [get_bd_pins psreset_board_control1/ext_reset_in] [get_bd_pins reset_wdt/ext_reset_in] [get_bd_pins util_vector_logic_1/Res]
  connect_bd_net -net util_vector_logic_0_Res1 [get_bd_pins util_vector_logic_0/Res] [get_bd_pins util_vector_logic_1/Op1]
  connect_bd_net -net util_vector_logic_2_Res [get_bd_pins util_vector_logic_1/Op2] [get_bd_pins util_vector_logic_2/Res]
  connect_bd_net -net xlconcat_0_dout [get_bd_pins axi_intc_0/intr] [get_bd_pins xlconcat_0/dout]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins xlconcat_0/In4] [get_bd_pins xlconcat_0/In5] [get_bd_pins xlconcat_0/In7] [get_bd_pins xlconcat_0/In10] [get_bd_pins xlconstant_0/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: pr_isolation_expanded
proc create_hier_cell_pr_isolation_expanded { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_pr_isolation_expanded() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S02_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 axi_firewall_ctrl_M_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 axi_firewall_ctrl_user_M_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 axi_firewall_data_M_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 embedded_scheduler_M03_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_secondary_b_M00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_control_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_control_userpf_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_data_periph_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_data_static_M_AXI_slr1

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_ddrmem_1_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_freq_cntr_M_AXI


  # Create pins
  create_bd_pin -dir I -type clk clkwiz_sysclks_clk_out2
  create_bd_pin -dir I clkwiz_sysclks_locked
  create_bd_pin -dir I -type rst dma_pcie_axi_aresetn
  create_bd_pin -dir I -type clk dma_pcie_s_axi_aclk
  create_bd_pin -dir I pcie_user_lnk_up
  create_bd_pin -dir I -from 0 -to 0 -type rst psreset_ctrlclk_interconnect_aresetn
  create_bd_pin -dir O -from 0 -to 0 -type rst psreset_regslice_ctrl_pr_interconnect_aresetn
  create_bd_pin -dir O -from 0 -to 0 -type rst psreset_regslice_data_m00_axi_interconnect_aresetn
  create_bd_pin -dir O -from 0 -to 0 -type rst psreset_regslice_data_pr_interconnect_aresetn
  create_bd_pin -dir O -from 127 -to 0 -type intr s_cu_intc_INTERRUPT
  create_bd_pin -dir O -from 0 -to 0 slice_reset_kernel_pr_Dout
  create_bd_pin -dir I -from 127 -to 0 -type intr xlconcat_interrupt_dout

  # Create instance: axi_interconnect_freq_cntr, and set properties
  set axi_interconnect_freq_cntr [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_interconnect_freq_cntr ]

  # Create instance: gate_pr, and set properties
  set gate_pr [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio gate_pr ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS_2 {1} \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_DOUT_DEFAULT {0xFFFFFFFF} \
   CONFIG.C_GPIO2_WIDTH {2} \
   CONFIG.C_GPIO_WIDTH {2} \
   CONFIG.C_IS_DUAL {1} \
 ] $gate_pr

  # Create instance: gate_pr_inv, and set properties
  set gate_pr_inv [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic gate_pr_inv ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $gate_pr_inv

  # Create instance: interconnect_data_slr, and set properties
  set interconnect_data_slr [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_data_slr ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.M03_HAS_REGSLICE {4} \
   CONFIG.M04_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {2} \
   CONFIG.S00_HAS_DATA_FIFO {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
   CONFIG.STRATEGY {2} \
 ] $interconnect_data_slr

  # Create instance: pr_decoupler_0, and set properties
  set pr_decoupler_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:pr_decoupler pr_decoupler_0 ]
  #set pr_decoupler_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:dfx_decoupler pr_decoupler_0 ]
  set_property -dict [ list \
   CONFIG.ALL_PARAMS {HAS_SIGNAL_STATUS 0 INTF {cu_intc {ID 0 CDC_STAGES 2 VLNV xilinx.com:signal:interrupt_rtl:1.0 SIGNALS {INTERRUPT {MANAGEMENT manual WIDTH 128}}}}} \
   CONFIG.GUI_HAS_SIGNAL_STATUS {false} \
   CONFIG.GUI_INTERFACE_NAME {cu_intc} \
   CONFIG.GUI_SELECT_CDC_STAGES {2} \
   CONFIG.GUI_SELECT_INTERFACE {0} \
   CONFIG.GUI_SELECT_VLNV {xilinx.com:signal:interrupt_rtl:1.0} \
   CONFIG.GUI_SIGNAL_DECOUPLED_0 {true} \
   CONFIG.GUI_SIGNAL_DECOUPLED_1 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_2 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_3 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_4 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_5 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_6 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_7 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_8 {false} \
   CONFIG.GUI_SIGNAL_DECOUPLED_9 {false} \
   CONFIG.GUI_SIGNAL_MANAGEMENT_0 {manual} \
   CONFIG.GUI_SIGNAL_PRESENT_0 {true} \
   CONFIG.GUI_SIGNAL_PRESENT_1 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_2 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_3 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_4 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_5 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_6 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_7 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_8 {false} \
   CONFIG.GUI_SIGNAL_PRESENT_9 {false} \
   CONFIG.GUI_SIGNAL_SELECT_0 {INTERRUPT} \
   CONFIG.GUI_SIGNAL_SELECT_1 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_2 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_3 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_4 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_5 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_6 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_7 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_8 {-1} \
   CONFIG.GUI_SIGNAL_SELECT_9 {-1} \
   CONFIG.GUI_SIGNAL_WIDTH_0 {128} \
   CONFIG.GUI_SIGNAL_WIDTH_1 {1} \
   CONFIG.GUI_SIGNAL_WIDTH_2 {1} \
   CONFIG.GUI_SIGNAL_WIDTH_3 {1} \
   CONFIG.GUI_SIGNAL_WIDTH_4 {1} \
   CONFIG.GUI_SIGNAL_WIDTH_5 {1} \
   CONFIG.GUI_SIGNAL_WIDTH_6 {1} \
 ] $pr_decoupler_0

  # Create instance: psreset_regslice_ctrl_pr, and set properties
  set psreset_regslice_ctrl_pr [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_regslice_ctrl_pr ]
  set_property -dict [ list \
   CONFIG.C_AUX_RST_WIDTH {1} \
   CONFIG.C_EXT_RST_WIDTH {1} \
 ] $psreset_regslice_ctrl_pr

  # Create instance: psreset_regslice_data_pr, and set properties
  set psreset_regslice_data_pr [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_regslice_data_pr ]
  set_property -dict [ list \
   CONFIG.C_AUX_RST_WIDTH {1} \
   CONFIG.C_EXT_RST_WIDTH {1} \
 ] $psreset_regslice_data_pr

  # Create instance: regslice_control_mgntpf, and set properties
  set regslice_control_mgntpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice regslice_control_mgntpf ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {26} \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
 ] $regslice_control_mgntpf

  # Create instance: regslice_control_userpf, and set properties
  set regslice_control_userpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice regslice_control_userpf ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {25} \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
 ] $regslice_control_userpf

  # Create instance: regslice_data_periph, and set properties
  set regslice_data_periph [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice regslice_data_periph ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {40} \
   CONFIG.DATA_WIDTH {64} \
   CONFIG.ID_WIDTH {2} \
   CONFIG.PROTOCOL {AXI4} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
   CONFIG.REG_AR {1} \
   CONFIG.REG_AW {1} \
   CONFIG.REG_B {1} \
 ] $regslice_data_periph

  # Create instance: regslice_data_static, and set properties
  set regslice_data_static [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice regslice_data_static ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {39} \
   CONFIG.DATA_WIDTH {512} \
   CONFIG.ID_WIDTH {4} \
   CONFIG.PROTOCOL {AXI4} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
   CONFIG.REG_AR {1} \
   CONFIG.REG_AW {1} \
   CONFIG.REG_B {1} \
 ] $regslice_data_static

  # Create instance: regslice_freq_cntr_mgntpf, and set properties
  set regslice_freq_cntr_mgntpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_register_slice regslice_freq_cntr_mgntpf ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {26} \
   CONFIG.DATA_WIDTH {32} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.READ_WRITE_MODE {READ_WRITE} \
 ] $regslice_freq_cntr_mgntpf

  # Create instance: slice_reset_kernel_pr, and set properties
  set slice_reset_kernel_pr [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice slice_reset_kernel_pr ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {2} \
 ] $slice_reset_kernel_pr

  # Create instance: slice_reset_system_pr, and set properties
  set slice_reset_system_pr [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice slice_reset_system_pr ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {0} \
   CONFIG.DIN_TO {0} \
   CONFIG.DIN_WIDTH {2} \
 ] $slice_reset_system_pr

  # Create instance: user_pf_interconnect_split, and set properties
  set user_pf_interconnect_split [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect user_pf_interconnect_split ]
  set_property -dict [ list \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {3} \
   CONFIG.S00_HAS_REGSLICE {4} \
   CONFIG.S01_HAS_REGSLICE {4} \
   CONFIG.S02_HAS_REGSLICE {4} \
 ] $user_pf_interconnect_split

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins interconnect_axilite_static_secondary_b_M00_AXI] [get_bd_intf_pins gate_pr/S_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins S02_AXI] [get_bd_intf_pins user_pf_interconnect_split/S02_AXI]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins regslice_control_M_AXI] [get_bd_intf_pins regslice_control_mgntpf/M_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins regslice_data_static_M_AXI_slr1] [get_bd_intf_pins regslice_data_static/M_AXI]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins axi_firewall_ctrl_M_AXI] [get_bd_intf_pins axi_interconnect_freq_cntr/S00_AXI]
  connect_bd_intf_net -intf_net Conn11 [get_bd_intf_pins regslice_control_userpf_M_AXI] [get_bd_intf_pins regslice_control_userpf/M_AXI]
  connect_bd_intf_net -intf_net Conn13 [get_bd_intf_pins regslice_freq_cntr_M_AXI] [get_bd_intf_pins regslice_freq_cntr_mgntpf/M_AXI]
  connect_bd_intf_net -intf_net Conn14 [get_bd_intf_pins axi_interconnect_freq_cntr/M00_AXI] [get_bd_intf_pins regslice_control_mgntpf/S_AXI]
  connect_bd_intf_net -intf_net Conn15 [get_bd_intf_pins axi_interconnect_freq_cntr/M01_AXI] [get_bd_intf_pins regslice_freq_cntr_mgntpf/S_AXI]
  connect_bd_intf_net -intf_net Conn16 [get_bd_intf_pins regslice_data_periph_M_AXI] [get_bd_intf_pins regslice_data_periph/M_AXI]
  connect_bd_intf_net -intf_net S01_AXI_1 [get_bd_intf_pins embedded_scheduler_M03_AXI] [get_bd_intf_pins user_pf_interconnect_split/S01_AXI]
  connect_bd_intf_net -intf_net axi_firewall_ctrl_user_M_AXI_1 [get_bd_intf_pins axi_firewall_ctrl_user_M_AXI] [get_bd_intf_pins user_pf_interconnect_split/S00_AXI]
  connect_bd_intf_net -intf_net axi_firewall_data_M_AXI_1 [get_bd_intf_pins axi_firewall_data_M_AXI] [get_bd_intf_pins interconnect_data_slr/S00_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins regslice_control_userpf/S_AXI] [get_bd_intf_pins user_pf_interconnect_split/M00_AXI]
  connect_bd_intf_net -intf_net interconnect_data_slr_M00_AXI [get_bd_intf_pins interconnect_data_slr/M00_AXI] [get_bd_intf_pins regslice_data_static/S_AXI]
  connect_bd_intf_net -intf_net interconnect_data_slr_M01_AXI [get_bd_intf_pins interconnect_data_slr/M01_AXI] [get_bd_intf_pins regslice_data_periph/S_AXI]

  # Create port connections
  connect_bd_net -net M00_ACLK_1 [get_bd_pins clkwiz_sysclks_clk_out2] [get_bd_pins axi_interconnect_freq_cntr/ACLK] [get_bd_pins axi_interconnect_freq_cntr/M00_ACLK] [get_bd_pins axi_interconnect_freq_cntr/M01_ACLK] [get_bd_pins axi_interconnect_freq_cntr/S00_ACLK] [get_bd_pins gate_pr/s_axi_aclk] [get_bd_pins pr_decoupler_0/decouple_ref_clk] [get_bd_pins psreset_regslice_ctrl_pr/slowest_sync_clk] [get_bd_pins regslice_control_mgntpf/aclk] [get_bd_pins regslice_control_userpf/aclk] [get_bd_pins regslice_freq_cntr_mgntpf/aclk] [get_bd_pins user_pf_interconnect_split/ACLK] [get_bd_pins user_pf_interconnect_split/M00_ACLK] [get_bd_pins user_pf_interconnect_split/S00_ACLK] [get_bd_pins user_pf_interconnect_split/S01_ACLK]
  connect_bd_net -net M00_ARESETN_1 [get_bd_pins psreset_ctrlclk_interconnect_aresetn] [get_bd_pins axi_interconnect_freq_cntr/ARESETN] [get_bd_pins axi_interconnect_freq_cntr/M00_ARESETN] [get_bd_pins axi_interconnect_freq_cntr/M01_ARESETN] [get_bd_pins axi_interconnect_freq_cntr/S00_ARESETN] [get_bd_pins gate_pr/s_axi_aresetn] [get_bd_pins psreset_regslice_ctrl_pr/ext_reset_in] [get_bd_pins user_pf_interconnect_split/ARESETN] [get_bd_pins user_pf_interconnect_split/M00_ARESETN] [get_bd_pins user_pf_interconnect_split/S00_ARESETN] [get_bd_pins user_pf_interconnect_split/S01_ARESETN]
  connect_bd_net -net dcm_locked_1 [get_bd_pins pcie_user_lnk_up] [get_bd_pins psreset_regslice_data_pr/dcm_locked]
  connect_bd_net -net dcm_locked_2 [get_bd_pins clkwiz_sysclks_locked] [get_bd_pins psreset_regslice_ctrl_pr/dcm_locked]
  connect_bd_net -net gate_pr_gpio_io_o [get_bd_pins gate_pr/gpio2_io_i] [get_bd_pins gate_pr/gpio_io_o] [get_bd_pins slice_reset_kernel_pr/Din] [get_bd_pins slice_reset_system_pr/Din]
  connect_bd_net -net gate_pr_inv_Res [get_bd_pins gate_pr_inv/Res] [get_bd_pins pr_decoupler_0/decouple]
  connect_bd_net -net pr_decoupler_0_s_cu_intc_INTERRUPT [get_bd_pins s_cu_intc_INTERRUPT] [get_bd_pins pr_decoupler_0/s_cu_intc_INTERRUPT]
  connect_bd_net -net psreset_regslice_data_pr_interconnect_aresetn [get_bd_pins psreset_regslice_data_pr_interconnect_aresetn] [get_bd_pins psreset_regslice_data_pr/interconnect_aresetn] [get_bd_pins regslice_data_periph/aresetn] [get_bd_pins regslice_data_static/aresetn]
  connect_bd_net -net psreset_regslice_pr_interconnect_aresetn [get_bd_pins psreset_regslice_ctrl_pr_interconnect_aresetn] [get_bd_pins psreset_regslice_ctrl_pr/interconnect_aresetn] [get_bd_pins regslice_control_mgntpf/aresetn] [get_bd_pins regslice_control_userpf/aresetn] [get_bd_pins regslice_freq_cntr_mgntpf/aresetn]
  connect_bd_net -net s_axi_aclk_1 [get_bd_pins dma_pcie_s_axi_aclk] [get_bd_pins interconnect_data_slr/ACLK] [get_bd_pins interconnect_data_slr/M00_ACLK] [get_bd_pins interconnect_data_slr/M01_ACLK] [get_bd_pins interconnect_data_slr/S00_ACLK] [get_bd_pins pr_decoupler_0/cu_intc_ref_clk] [get_bd_pins psreset_regslice_data_pr/slowest_sync_clk] [get_bd_pins regslice_data_periph/aclk] [get_bd_pins regslice_data_static/aclk] [get_bd_pins user_pf_interconnect_split/S02_ACLK]
  connect_bd_net -net s_axi_aresetn_1 [get_bd_pins dma_pcie_axi_aresetn] [get_bd_pins interconnect_data_slr/ARESETN] [get_bd_pins interconnect_data_slr/M00_ARESETN] [get_bd_pins interconnect_data_slr/M01_ARESETN] [get_bd_pins interconnect_data_slr/S00_ARESETN] [get_bd_pins psreset_regslice_data_pr/ext_reset_in] [get_bd_pins user_pf_interconnect_split/S02_ARESETN]
  connect_bd_net -net slice_reset_kernel_pr_Dout [get_bd_pins slice_reset_kernel_pr_Dout] [get_bd_pins slice_reset_kernel_pr/Dout]
  connect_bd_net -net slice_reset_system_pr_Dout [get_bd_pins gate_pr_inv/Op1] [get_bd_pins psreset_regslice_ctrl_pr/aux_reset_in] [get_bd_pins psreset_regslice_data_pr/aux_reset_in] [get_bd_pins slice_reset_system_pr/Dout]
  connect_bd_net -net xlconcat_interrupt_dout_1 [get_bd_pins xlconcat_interrupt_dout] [get_bd_pins pr_decoupler_0/rp_cu_intc_INTERRUPT]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: memc
proc create_hier_cell_memc { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_memc() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 c1_sys

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:ddr4_rtl:1.0 ddrmem_1_C0_DDR4

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_secondary_b_M02_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_ddrmem_1_M_AXI


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 -type clk IBUF_OUT
  create_bd_pin -dir O -type clk ddrmem_1_c0_ddr4_ui_clk
  create_bd_pin -dir O ddrmem_1_c0_init_calib_complete
  create_bd_pin -dir I -from 0 -to 0 -type rst logic_reset_op_Res
  create_bd_pin -dir O -from 0 -to 0 -type rst psreset_ddrmem_n_1_interconnect_aresetn

  # Create instance: ddr1_clk_bufg, and set properties
  set ddr1_clk_bufg [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf ddr1_clk_bufg ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {BUFG} \
 ] $ddr1_clk_bufg

  # Create instance: ddr1_clk_ibufds, and set properties
  set ddr1_clk_ibufds [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf ddr1_clk_ibufds ]

  # Create interface connections
  connect_bd_intf_net -intf_net c1_sys_1 [get_bd_intf_pins c1_sys] [get_bd_intf_pins ddr1_clk_ibufds/CLK_IN_D]

  # Create port connections
  connect_bd_net -net util_ds_buf_0_IBUF_OUT [get_bd_pins ddr1_clk_bufg/BUFG_I] [get_bd_pins ddr1_clk_ibufds/IBUF_OUT]
  connect_bd_net -net util_ds_buf_2_BUFG_O [get_bd_pins IBUF_OUT] [get_bd_pins ddr1_clk_bufg/BUFG_O]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: brd_mgmt_scheduler
proc create_hier_cell_brd_mgmt_scheduler { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_brd_mgmt_scheduler() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:bscan_rtl:1.0 BSCAN

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 M06_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 S00_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:uart_rtl:1.0 bmc_uart

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 board_i2c_ctrl_IIC

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 embedded_scheduler_M03_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 host

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_secondary_b_M03_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_secondary_b_M04_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_user_M03_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 m_axi_CQDma

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 m_axi_CUDma

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 m_axi_a

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 mb_bdmgmt_M01_AXI


  # Create pins
  create_bd_pin -dir I -from 0 -to 0 HWICAP_intr
  create_bd_pin -dir I -from 5 -to 0 In0
  create_bd_pin -dir I -from 0 -to 0 In12
  create_bd_pin -dir I -from 0 -to 0 Op2
  create_bd_pin -dir I -from 0 -to 0 QSPI_intr
  create_bd_pin -dir I -type rst S00_ARESETN
  create_bd_pin -dir O -from 0 -to 0 board_i2c_ctrl_gpo
  create_bd_pin -dir I clkwiz_schdeuler_locked
  create_bd_pin -dir I -type clk clkwiz_schduler_clk_out1
  create_bd_pin -dir I -type clk clkwiz_sysclks_clk_out2
  create_bd_pin -dir I -type clk clkwiz_sysclks_clk_out3
  create_bd_pin -dir I dcm_locked
  create_bd_pin -dir I dcm_locked1
  create_bd_pin -dir I -type clk dma_pcie_axi_aclk
  create_bd_pin -dir I -type rst dma_pcie_reset_n
  create_bd_pin -dir O -from 0 -to 0 gpio2_io_o
  create_bd_pin -dir O -from 0 -to 0 gpio_io_o
  create_bd_pin -dir I -from 0 -to 0 iob_static_perst_n_out
  create_bd_pin -dir I -from 15 -to 0 irq_ack
  create_bd_pin -dir I -from 127 -to 0 irq_cu
  create_bd_pin -dir O irq_sr0
  create_bd_pin -dir O irq_sr1
  create_bd_pin -dir O irq_sr2
  create_bd_pin -dir O irq_sr3
  create_bd_pin -dir I -type rst psreset_ctrlclk_interconnect_aresetn
  create_bd_pin -dir I -type clk s_axi_aclk
  create_bd_pin -dir O -from 0 -to 0 -type rst s_axi_aresetn

  # Create instance: CuDmaController_0, and set properties
  set CuDmaController_0 [ create_bd_cell -type ip -vlnv xilinx:hls:CuDmaController CuDmaController_0 ]

  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_interconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
 ] $axi_interconnect_0

  # Create instance: axi_protocol_converter_0, and set properties
  set axi_protocol_converter_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_protocol_converter axi_protocol_converter_0 ]

  # Create instance: board_management
  create_hier_cell_board_management $hier_obj board_management

  # Create instance: cuisr_0, and set properties
  set cuisr_0 [ create_bd_cell -type ip -vlnv xilinx:hls:cuisr cuisr_0 ]

  # Create instance: embedded_schduler
  create_hier_cell_embedded_schduler $hier_obj embedded_schduler

  # Create instance: embedded_scheduler_hw_0, and set properties
  set block_name embedded_scheduler_hw
  set block_cell_name embedded_scheduler_hw_0
  if { [catch {set embedded_scheduler_hw_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:shell_utils_u2_embedded_scheduler_hw embedded_scheduler_hw_0 ] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $embedded_scheduler_hw_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: mdm_board_control, and set properties
  set mdm_board_control [ create_bd_cell -type ip -vlnv xilinx.com:ip:mdm mdm_board_control ]
  set_property -dict [ list \
   CONFIG.C_MB_DBG_PORTS {2} \
   CONFIG.C_USE_BSCAN {2} \
   CONFIG.C_USE_UART {1} \
 ] $mdm_board_control

  # Create instance: mdm_deug_interconnect, and set properties
  set mdm_deug_interconnect [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect mdm_deug_interconnect ]
  set_property -dict [ list \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
 ] $mdm_deug_interconnect

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins mb_bdmgmt_M01_AXI] [get_bd_intf_pins board_management/mb_bdmgmt_M01_AXI]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins board_i2c_ctrl_IIC] [get_bd_intf_pins board_management/iic]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins interconnect_axilite_static_secondary_b_M04_AXI] [get_bd_intf_pins board_management/interconnect_axilite_static_secondary_b_M04_AXI]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins interconnect_axilite_static_user_M03_AXI] [get_bd_intf_pins embedded_schduler/interconnect_axilite_static_user_M03_AXI]
  connect_bd_intf_net -intf_net Conn5 [get_bd_intf_pins BSCAN] [get_bd_intf_pins mdm_board_control/BSCAN]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins M06_AXI] [get_bd_intf_pins board_management/M06_AXI]
  connect_bd_intf_net -intf_net Conn7 [get_bd_intf_pins bmc_uart] [get_bd_intf_pins board_management/bmc_uart]
  connect_bd_intf_net -intf_net Conn8 [get_bd_intf_pins S00_AXI] [get_bd_intf_pins board_management/S00_AXI1]
  connect_bd_intf_net -intf_net CuDmaController_0_m_axi_CQDma [get_bd_intf_pins m_axi_CQDma] [get_bd_intf_pins CuDmaController_0/m_axi_CQDma]
  connect_bd_intf_net -intf_net CuDmaController_0_m_axi_CUDma [get_bd_intf_pins m_axi_CUDma] [get_bd_intf_pins CuDmaController_0/m_axi_CUDma]
  connect_bd_intf_net -intf_net S01_AXI_1 [get_bd_intf_pins axi_interconnect_0/S01_AXI] [get_bd_intf_pins embedded_schduler/embedded_scheduler_M04_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins embedded_schduler/embedded_scheduler_M00_AXI] [get_bd_intf_pins mdm_deug_interconnect/S01_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI1 [get_bd_intf_pins axi_interconnect_0/M00_AXI] [get_bd_intf_pins embedded_scheduler_hw_0/host]
  connect_bd_intf_net -intf_net axi_protocol_converter_0_M_AXI [get_bd_intf_pins m_axi_a] [get_bd_intf_pins axi_protocol_converter_0/M_AXI]
  connect_bd_intf_net -intf_net cuisr_0_m_axi_a [get_bd_intf_pins axi_protocol_converter_0/S_AXI] [get_bd_intf_pins cuisr_0/m_axi_a]
  connect_bd_intf_net -intf_net embedded_schduler_M03_AXI [get_bd_intf_pins embedded_scheduler_M03_AXI] [get_bd_intf_pins embedded_schduler/embedded_scheduler_M03_AXI]
  connect_bd_intf_net -intf_net host_1 [get_bd_intf_pins host] [get_bd_intf_pins axi_interconnect_0/S00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_M00_AXI [get_bd_intf_pins board_management/mb_bdmgmt_M00_AXI] [get_bd_intf_pins mdm_deug_interconnect/S00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_microblaze_bram_M02_AXI [get_bd_intf_pins board_management/mb_bdmgmt_M02_AXI] [get_bd_intf_pins embedded_schduler/mb_bdmgmt_M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_b_M03_AXI_1 [get_bd_intf_pins interconnect_axilite_static_secondary_b_M03_AXI] [get_bd_intf_pins board_management/S00_AXI]
  connect_bd_intf_net -intf_net mdm_board_control_MBDEBUG_1 [get_bd_intf_pins embedded_schduler/DEBUG] [get_bd_intf_pins mdm_board_control/MBDEBUG_1]
  connect_bd_intf_net -intf_net mdm_deug_interconnect_M00_AXI [get_bd_intf_pins mdm_board_control/S_AXI] [get_bd_intf_pins mdm_deug_interconnect/M00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_debug [get_bd_intf_pins board_management/DEBUG] [get_bd_intf_pins mdm_board_control/MBDEBUG_0]

  # Create port connections
  connect_bd_net -net CuDmaController_0_ap_done [get_bd_pins CuDmaController_0/ap_done] [get_bd_pins embedded_scheduler_hw_0/ap_done_cudma]
  connect_bd_net -net HWICAP_intr_1 [get_bd_pins HWICAP_intr] [get_bd_pins board_management/HWICAP_intr]
  connect_bd_net -net In0_1 [get_bd_pins In0] [get_bd_pins board_management/In0]
  connect_bd_net -net In12_1 [get_bd_pins In12] [get_bd_pins board_management/In12]
  connect_bd_net -net Op2_1 [get_bd_pins Op2] [get_bd_pins board_management/Op2]
  connect_bd_net -net QSPI_intr_1 [get_bd_pins QSPI_intr] [get_bd_pins board_management/QSPI_intr]
  connect_bd_net -net S00_ARESETN_1 [get_bd_pins S00_ARESETN] [get_bd_pins board_management/S00_ARESETN]
  connect_bd_net -net axi_gpio_mb_ctrl_gpio_io_o [get_bd_pins board_management/aux_reset_in] [get_bd_pins embedded_schduler/aux_reset_in]
  connect_bd_net -net board_i2c_ctrl_gpo [get_bd_pins board_i2c_ctrl_gpo] [get_bd_pins board_management/board_i2c_ctrl_gpo]
  connect_bd_net -net board_management_gpio2_io_o [get_bd_pins gpio2_io_o] [get_bd_pins board_management/gpio2_io_o]
  connect_bd_net -net board_management_gpio_io_o [get_bd_pins gpio_io_o] [get_bd_pins board_management/gpio_io_o]
  connect_bd_net -net clkwiz_schdeuler_locked_1 [get_bd_pins clkwiz_schdeuler_locked] [get_bd_pins embedded_schduler/clkwiz_schdeuler_locked]
  connect_bd_net -net clkwiz_sysclks_clk_out3_1 [get_bd_pins clkwiz_sysclks_clk_out3] [get_bd_pins board_management/clkwiz_sysclks_clk_out2] [get_bd_pins mdm_board_control/S_AXI_ACLK] [get_bd_pins mdm_deug_interconnect/ACLK] [get_bd_pins mdm_deug_interconnect/M00_ACLK] [get_bd_pins mdm_deug_interconnect/S00_ACLK]
  connect_bd_net -net cuisr_0_ap_done [get_bd_pins cuisr_0/ap_done] [get_bd_pins embedded_scheduler_hw_0/ap_done_cuisr]
  connect_bd_net -net dcm_locked1_1 [get_bd_pins dcm_locked1] [get_bd_pins board_management/dcm_locked1]
  connect_bd_net -net dcm_locked_1 [get_bd_pins dcm_locked] [get_bd_pins board_management/dcm_locked]
  connect_bd_net -net dma_pcie_axi_aclk_1 [get_bd_pins dma_pcie_axi_aclk] [get_bd_pins CuDmaController_0/ap_clk] [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_protocol_converter_0/aclk] [get_bd_pins cuisr_0/ap_clk] [get_bd_pins embedded_scheduler_hw_0/clk]
  connect_bd_net -net dma_pcie_reset_n_1 [get_bd_pins dma_pcie_reset_n] [get_bd_pins CuDmaController_0/ap_rst_n] [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_protocol_converter_0/aresetn] [get_bd_pins cuisr_0/ap_rst_n] [get_bd_pins embedded_scheduler_hw_0/reset_n]
  connect_bd_net -net embedded_scheduler_hw_0_CqBaseAddress [get_bd_pins CuDmaController_0/CqBaseAddress] [get_bd_pins embedded_scheduler_hw_0/CqBaseAddress]
  connect_bd_net -net embedded_scheduler_hw_0_CuDmaQueue_reg [get_bd_pins CuDmaController_0/CuDmaQueue] [get_bd_pins embedded_scheduler_hw_0/CuDmaQueue_reg]
  connect_bd_net -net embedded_scheduler_hw_0_NoofSlots [get_bd_pins CuDmaController_0/NoOfSlots] [get_bd_pins embedded_scheduler_hw_0/NoofSlots]
  connect_bd_net -net embedded_scheduler_hw_0_Offset [get_bd_pins cuisr_0/Offset] [get_bd_pins embedded_scheduler_hw_0/Offset]
  connect_bd_net -net embedded_scheduler_hw_0_SlotSize [get_bd_pins CuDmaController_0/SlotSize] [get_bd_pins embedded_scheduler_hw_0/SlotSize]
  connect_bd_net -net embedded_scheduler_hw_0_ap_start_cudma [get_bd_pins CuDmaController_0/ap_start] [get_bd_pins embedded_scheduler_hw_0/ap_start_cudma]
  connect_bd_net -net embedded_scheduler_hw_0_ap_start_cuisr [get_bd_pins cuisr_0/ap_start] [get_bd_pins embedded_scheduler_hw_0/ap_start_cuisr]
  connect_bd_net -net embedded_scheduler_hw_0_irq_cu_completion [get_bd_pins embedded_schduler/In1] [get_bd_pins embedded_scheduler_hw_0/irq_cu_completion]
  connect_bd_net -net embedded_scheduler_hw_0_irq_slotavailable [get_bd_pins embedded_schduler/In0] [get_bd_pins embedded_scheduler_hw_0/irq_slotavailable]
  connect_bd_net -net embedded_scheduler_hw_0_irq_sr0 [get_bd_pins irq_sr0] [get_bd_pins embedded_scheduler_hw_0/irq_sr0]
  connect_bd_net -net embedded_scheduler_hw_0_irq_sr1 [get_bd_pins irq_sr1] [get_bd_pins embedded_scheduler_hw_0/irq_sr1]
  connect_bd_net -net embedded_scheduler_hw_0_irq_sr2 [get_bd_pins irq_sr2] [get_bd_pins embedded_scheduler_hw_0/irq_sr2]
  connect_bd_net -net embedded_scheduler_hw_0_irq_sr3 [get_bd_pins irq_sr3] [get_bd_pins embedded_scheduler_hw_0/irq_sr3]
  connect_bd_net -net ext_reset_in_1 [get_bd_pins psreset_ctrlclk_interconnect_aresetn] [get_bd_pins board_management/psreset_ctrlclk_interconnect_aresetn] [get_bd_pins embedded_schduler/psreset_ctrlclk_interconnect_aresetn]
  connect_bd_net -net iob_static_perst_n_out_1 [get_bd_pins iob_static_perst_n_out] [get_bd_pins board_management/iob_static_perst_n_out]
  connect_bd_net -net irq_ack_1 [get_bd_pins irq_ack] [get_bd_pins embedded_scheduler_hw_0/irq_ack]
  connect_bd_net -net irq_cu_1 [get_bd_pins irq_cu] [get_bd_pins embedded_scheduler_hw_0/irq_cu]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins board_management/mb_debug_sys_rst] [get_bd_pins embedded_schduler/mb_debug_sys_rst] [get_bd_pins mdm_board_control/Debug_SYS_Rst]
  connect_bd_net -net mdm_board_control_Interrupt [get_bd_pins board_management/MDM_intr] [get_bd_pins mdm_board_control/Interrupt]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins clkwiz_sysclks_clk_out2] [get_bd_pins board_management/clkwiz_sysclks_clk_out3] [get_bd_pins embedded_schduler/clkwiz_sysclks_clk_out2]
  connect_bd_net -net psreset_scheduler_interconnect_aresetn [get_bd_pins s_axi_aresetn] [get_bd_pins axi_interconnect_0/S01_ARESETN] [get_bd_pins embedded_schduler/s_axi_aresetn] [get_bd_pins mdm_deug_interconnect/S01_ARESETN]
  connect_bd_net -net rst_pcie_250M_peripheral_aresetn [get_bd_pins board_management/peripheral_aresetn] [get_bd_pins mdm_board_control/S_AXI_ARESETN] [get_bd_pins mdm_deug_interconnect/ARESETN] [get_bd_pins mdm_deug_interconnect/M00_ARESETN] [get_bd_pins mdm_deug_interconnect/S00_ARESETN]
  connect_bd_net -net s_axi_aclk_1 [get_bd_pins s_axi_aclk] [get_bd_pins board_management/s_axi_aclk]
  connect_bd_net -net slowest_sync_clk_1 [get_bd_pins clkwiz_schduler_clk_out1] [get_bd_pins axi_interconnect_0/S01_ACLK] [get_bd_pins embedded_schduler/clkwiz_schduler_clk_out1] [get_bd_pins mdm_deug_interconnect/S01_ACLK]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: base_tieoffs
proc create_hier_cell_base_tieoffs { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_base_tieoffs() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir O -from 0 -to 0 const_gnd_1_dout

  # Create instance: const_gnd_1, and set properties
  set const_gnd_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant const_gnd_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $const_gnd_1

  # Create port connections
  connect_bd_net -net const_gnd_1_dout [get_bd_pins const_gnd_1_dout] [get_bd_pins const_gnd_1/dout]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: base_clocking
proc create_hier_cell_base_clocking { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_base_clocking() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_secondary_a_M03_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 interconnect_axilite_static_secondary_a_M04_AXI

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 ref_clk

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 ref_clk_ds

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:aximm_rtl:1.0 s_axi_lite


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 -type clk IBUF_DS_ODIV2
  create_bd_pin -dir O -from 0 -to 0 -type clk IBUF_OUT
  create_bd_pin -dir I aux_reset_in
  create_bd_pin -dir O -from 0 -to 0 -type clk buf_refclk_ibuf_IBUF_DS_ODIV2
  create_bd_pin -dir O -from 0 -to 0 -type clk buf_refclk_ibuf_IBUF_OUT
  create_bd_pin -dir I -from 0 -to 0 -type clk clk_in1
  create_bd_pin -dir O -type clk clk_out1
  create_bd_pin -dir O -type clk clk_out2
  create_bd_pin -dir O -type clk clkwiz_kernel2_clk_out1
  create_bd_pin -dir O clkwiz_kernel2_locked
  create_bd_pin -dir O -type clk clkwiz_kernel_clk_out1
  create_bd_pin -dir O clkwiz_kernel_locked
  create_bd_pin -dir O -type clk clkwiz_pcie_clk_out1
  create_bd_pin -dir O clkwiz_schdeuler_locked
  create_bd_pin -dir O -type clk clkwiz_schduler_clk_out1
  create_bd_pin -dir O -type clk clkwiz_sysclks_clk_out2
  create_bd_pin -dir O clkwiz_sysclks_locked
  create_bd_pin -dir I -type clk dma_pcie_axi_aclk
  create_bd_pin -dir I -type rst dma_pcie_axi_aresetn
  create_bd_pin -dir O locked
  create_bd_pin -dir O locked1
  create_bd_pin -dir O -from 0 -to 0 -type rst peripheral_aresetn
  create_bd_pin -dir I -type rst perst_n
  create_bd_pin -dir O -from 0 -to 0 -type rst psreset_axi_interconnect_aresetn
  create_bd_pin -dir O -from 0 -to 0 -type rst psreset_ctrlclk_interconnect_aresetn

  # Create instance: buf_refclk_ibuf, and set properties
  set buf_refclk_ibuf [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf buf_refclk_ibuf ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {IBUFDSGTE} \
 ] $buf_refclk_ibuf

  # Create instance: buf_refclk_ibuf1, and set properties
  set buf_refclk_ibuf1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf buf_refclk_ibuf1 ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {IBUFDSGTE} \
 ] $buf_refclk_ibuf1

  # Create instance: clk_freq_scaler_0, and set properties
  set clk_freq_scaler_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_freq_scaler clk_freq_scaler_0 ]

  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz clk_wiz_0 ]
  set_property -dict [ list \
   CONFIG.CLKOUT1_DRIVES {Buffer} \
   CONFIG.CLKOUT1_JITTER {144.990} \
   CONFIG.CLKOUT1_PHASE_ERROR {107.936} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {50} \
   CONFIG.CLKOUT2_DRIVES {Buffer} \
   CONFIG.CLKOUT3_DRIVES {Buffer} \
   CONFIG.CLKOUT4_DRIVES {Buffer} \
   CONFIG.CLKOUT5_DRIVES {Buffer} \
   CONFIG.CLKOUT6_DRIVES {Buffer} \
   CONFIG.CLKOUT7_DRIVES {Buffer} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {8} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {16} \
   CONFIG.MMCM_COMPENSATION {AUTO} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.PRIMITIVE {PLL} \
   CONFIG.PRIM_IN_FREQ {100} \
   CONFIG.PRIM_SOURCE {No_buffer} \
   CONFIG.USE_RESET {false} \
 ] $clk_wiz_0

  # Create instance: clkwiz_kernel, and set properties
  set clkwiz_kernel [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz clkwiz_kernel ]
  set_property -dict [ list \
   CONFIG.CLKOUT1_JITTER {94.862} \
   CONFIG.CLKOUT1_PHASE_ERROR {87.180} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {300.000} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {4.000} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.PRIM_SOURCE {No_buffer} \
   CONFIG.USE_DYN_RECONFIG {true} \
 ] $clkwiz_kernel

  # Create instance: clkwiz_kernel2, and set properties
  set clkwiz_kernel2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz clkwiz_kernel2 ]
  set_property -dict [ list \
   CONFIG.CLKOUT1_JITTER {86.824} \
   CONFIG.CLKOUT1_PHASE_ERROR {87.466} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {500.000} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {11.875} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {2.375} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.PRIM_SOURCE {No_buffer} \
   CONFIG.USE_DYN_RECONFIG {true} \
 ] $clkwiz_kernel2

  # Create instance: clkwiz_pcie, and set properties
  set clkwiz_pcie [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz clkwiz_pcie ]
  set_property -dict [ list \
   CONFIG.CLKOUT1_DRIVES {Buffer} \
   CONFIG.CLKOUT1_JITTER {107.111} \
   CONFIG.CLKOUT1_PHASE_ERROR {85.928} \
   CONFIG.CLKOUT2_DRIVES {Buffer} \
   CONFIG.CLKOUT3_DRIVES {Buffer} \
   CONFIG.CLKOUT4_DRIVES {Buffer} \
   CONFIG.CLKOUT5_DRIVES {Buffer} \
   CONFIG.CLKOUT6_DRIVES {Buffer} \
   CONFIG.CLKOUT7_DRIVES {Buffer} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {4} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {10} \
   CONFIG.MMCM_COMPENSATION {AUTO} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.PRIMITIVE {PLL} \
   CONFIG.PRIM_SOURCE {No_buffer} \
   CONFIG.RESET_PORT {resetn} \
   CONFIG.RESET_TYPE {ACTIVE_LOW} \
   CONFIG.SECONDARY_SOURCE {Single_ended_clock_capable_pin} \
   CONFIG.USE_PHASE_ALIGNMENT {false} \
 ] $clkwiz_pcie

  # Create instance: clkwiz_scheduler, and set properties
  set clkwiz_scheduler [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz clkwiz_scheduler ]
  set_property -dict [ list \
   CONFIG.CLKIN1_JITTER_PS {40.0} \
   CONFIG.CLKOUT1_DRIVES {Buffer} \
   CONFIG.CLKOUT1_JITTER {87.277} \
   CONFIG.CLKOUT1_PHASE_ERROR {92.989} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {250.000} \
   CONFIG.CLKOUT2_DRIVES {Buffer} \
   CONFIG.CLKOUT3_DRIVES {Buffer} \
   CONFIG.CLKOUT4_DRIVES {Buffer} \
   CONFIG.CLKOUT5_DRIVES {Buffer} \
   CONFIG.CLKOUT6_DRIVES {Buffer} \
   CONFIG.CLKOUT7_DRIVES {Buffer} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {3} \
   CONFIG.MMCM_CLKIN1_PERIOD {4.0} \
   CONFIG.MMCM_CLKIN2_PERIOD {10.0} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {3} \
   CONFIG.MMCM_COMPENSATION {AUTO} \
   CONFIG.MMCM_DIVCLK_DIVIDE {1} \
   CONFIG.PRIMITIVE {PLL} \
   CONFIG.PRIM_IN_FREQ {250.000} \
   CONFIG.PRIM_SOURCE {No_buffer} \
   CONFIG.RESET_PORT {resetn} \
   CONFIG.RESET_TYPE {ACTIVE_LOW} \
   CONFIG.SECONDARY_SOURCE {Single_ended_clock_capable_pin} \
   CONFIG.USE_PHASE_ALIGNMENT {false} \
 ] $clkwiz_scheduler

  # Create instance: clkwiz_sysclks, and set properties
  set clkwiz_sysclks [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz clkwiz_sysclks ]
  set_property -dict [ list \
   CONFIG.CLKOUT1_DRIVES {Buffer} \
   CONFIG.CLKOUT1_JITTER {115.287} \
   CONFIG.CLKOUT1_PHASE_ERROR {106.915} \
   CONFIG.CLKOUT1_REQUESTED_OUT_FREQ {300.000} \
   CONFIG.CLKOUT2_DRIVES {Buffer} \
   CONFIG.CLKOUT2_JITTER {162.906} \
   CONFIG.CLKOUT2_PHASE_ERROR {106.915} \
   CONFIG.CLKOUT2_REQUESTED_OUT_FREQ {50.000} \
   CONFIG.CLKOUT2_USED {true} \
   CONFIG.CLKOUT3_DRIVES {Buffer} \
   CONFIG.CLKOUT4_DRIVES {Buffer} \
   CONFIG.CLKOUT5_DRIVES {Buffer} \
   CONFIG.CLKOUT6_DRIVES {Buffer} \
   CONFIG.CLKOUT7_DRIVES {Buffer} \
   CONFIG.MMCM_CLKFBOUT_MULT_F {11} \
   CONFIG.MMCM_CLKOUT0_DIVIDE_F {3} \
   CONFIG.MMCM_CLKOUT1_DIVIDE {18} \
   CONFIG.MMCM_COMPENSATION {AUTO} \
   CONFIG.MMCM_DIVCLK_DIVIDE {3} \
   CONFIG.NUM_OUT_CLKS {2} \
   CONFIG.PRIMITIVE {MMCM} \
   CONFIG.PRIM_SOURCE {No_buffer} \
   CONFIG.RESET_PORT {resetn} \
   CONFIG.RESET_TYPE {ACTIVE_LOW} \
   CONFIG.SECONDARY_SOURCE {Single_ended_clock_capable_pin} \
   CONFIG.USE_PHASE_ALIGNMENT {false} \
 ] $clkwiz_sysclks

  set clk_meta_adapter_base_clk [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_metadata_adapter clk_meta_adapter_base_clk ]
  set_property -dict [ list \
    CONFIG.CLK_DOMAIN {cd_ctrl_00} \
  ] $clk_meta_adapter_base_clk

  set clk_meta_adapter_clk_kernel_1_clk1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_metadata_adapter clk_meta_adapter_clk_kernel_1_clk1 ]
  set_property -dict [ list \
    CONFIG.CLK_DOMAIN {cd_kernel_ref_clk_00} \
  ] $clk_meta_adapter_clk_kernel_1_clk1

  set clk_meta_adapter_clk_kernel_2_clk1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_metadata_adapter clk_meta_adapter_clk_kernel_2_clk1 ]
  set_property -dict [ list \
    CONFIG.CLK_DOMAIN {cd_kernel2_ref_clk_00} \
  ] $clk_meta_adapter_clk_kernel_2_clk1

  # Create instance: logic_pll_lock, and set properties
  set logic_pll_lock [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic logic_pll_lock ]
  set_property -dict [ list \
   CONFIG.C_SIZE {1} \
 ] $logic_pll_lock

  # Create instance: psreset_axi, and set properties
  set psreset_axi [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_axi ]
  set_property -dict [ list \
   CONFIG.C_AUX_RST_WIDTH {1} \
   CONFIG.C_EXT_RST_WIDTH {1} \
 ] $psreset_axi

  # Create instance: psreset_ctrlclk, and set properties
  set psreset_ctrlclk [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_ctrlclk ]
  set_property -dict [ list \
   CONFIG.C_AUX_RST_WIDTH {1} \
   CONFIG.C_EXT_RST_WIDTH {1} \
 ] $psreset_ctrlclk

  # Create instance: psreset_ctrlclk1, and set properties
  set psreset_ctrlclk1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_ctrlclk1 ]
  set_property -dict [ list \
   CONFIG.C_AUX_RST_WIDTH {1} \
   CONFIG.C_EXT_RST_WIDTH {1} \
 ] $psreset_ctrlclk1

  # Create instance: psreset_ctrlclk2, and set properties
  set psreset_ctrlclk2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset psreset_ctrlclk2 ]
  set_property -dict [ list \
   CONFIG.C_AUX_RST_WIDTH {1} \
   CONFIG.C_EXT_RST_WIDTH {1} \
 ] $psreset_ctrlclk2

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins ref_clk] [get_bd_intf_pins buf_refclk_ibuf/CLK_IN_D]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins ref_clk_ds] [get_bd_intf_pins buf_refclk_ibuf1/CLK_IN_D]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins s_axi_lite] [get_bd_intf_pins clk_freq_scaler_0/s_axi_lite]
  connect_bd_intf_net -intf_net interconnect_axilite_static_M03_AXI_1 [get_bd_intf_pins interconnect_axilite_static_secondary_a_M03_AXI] [get_bd_intf_pins clkwiz_kernel/s_axi_lite]
  connect_bd_intf_net -intf_net s_axi_lite_1 [get_bd_intf_pins interconnect_axilite_static_secondary_a_M04_AXI] [get_bd_intf_pins clkwiz_kernel2/s_axi_lite]

  # Create port connections
  connect_bd_net -net aux_reset_in_1 [get_bd_pins aux_reset_in] [get_bd_pins psreset_axi/aux_reset_in] [get_bd_pins psreset_ctrlclk/aux_reset_in]
  connect_bd_net -net buf_refclk_ibuf1_IBUF_DS_ODIV2 [get_bd_pins IBUF_DS_ODIV2] [get_bd_pins buf_refclk_ibuf1/IBUF_DS_ODIV2]
  connect_bd_net -net buf_refclk_ibuf1_IBUF_OUT [get_bd_pins IBUF_OUT] [get_bd_pins buf_refclk_ibuf1/IBUF_OUT]
  connect_bd_net -net buf_refclk_ibuf_IBUF_DS_ODIV2 [get_bd_pins buf_refclk_ibuf_IBUF_DS_ODIV2] [get_bd_pins buf_refclk_ibuf/IBUF_DS_ODIV2]
  connect_bd_net -net buf_refclk_ibuf_IBUF_OUT [get_bd_pins buf_refclk_ibuf_IBUF_OUT] [get_bd_pins buf_refclk_ibuf/IBUF_OUT]
  connect_bd_net -net clk_freq_scaler_0_clk_out [get_bd_pins clkwiz_kernel_clk_out1] [get_bd_pins clk_meta_adapter_clk_kernel_1_clk1/clk_out]
  connect_bd_net -net clk_in1_1 [get_bd_pins clk_in1] [get_bd_pins clk_wiz_0/clk_in1]
  connect_bd_net -net clk_wiz_0_clk_out1 [get_bd_pins clk_out2] [get_bd_pins clk_wiz_0/clk_out1] [get_bd_pins psreset_ctrlclk2/slowest_sync_clk]
  connect_bd_net -net clk_wiz_0_locked [get_bd_pins locked1] [get_bd_pins clk_wiz_0/locked]
  connect_bd_net -net clkwiz_kernel2_clk_out1_m [get_bd_pins clkwiz_kernel2/clk_out1] [get_bd_pins clk_meta_adapter_clk_kernel_2_clk1/clk_in]
  connect_bd_net -net clkwiz_kernel2_clk_out1 [get_bd_pins clkwiz_kernel2_clk_out1] [get_bd_pins clk_meta_adapter_clk_kernel_2_clk1/clk_out]
  connect_bd_net -net clkwiz_kernel2_locked [get_bd_pins clkwiz_kernel2_locked] [get_bd_pins clkwiz_kernel2/locked]
  connect_bd_net -net clkwiz_kernel_clk_out2_mets [get_bd_pins clk_freq_scaler_0/clk_out] [get_bd_pins clk_meta_adapter_clk_kernel_1_clk1/clk_in]
  connect_bd_net -net clkwiz_kernel_clk_out2 [get_bd_pins clk_freq_scaler_0/clk_in] [get_bd_pins clkwiz_kernel/clk_out1] [get_bd_pins psreset_ctrlclk1/slowest_sync_clk]
  connect_bd_net -net clkwiz_kernel_locked [get_bd_pins clkwiz_kernel_locked] [get_bd_pins clkwiz_kernel/locked] [get_bd_pins psreset_ctrlclk1/dcm_locked]
  connect_bd_net -net clkwiz_pcie_clk_out1 [get_bd_pins clkwiz_pcie_clk_out1] [get_bd_pins clkwiz_kernel/clk_in1] [get_bd_pins clkwiz_kernel2/clk_in1] [get_bd_pins clkwiz_pcie/clk_out1]
  connect_bd_net -net clkwiz_pcie_locked [get_bd_pins clkwiz_pcie/locked] [get_bd_pins logic_pll_lock/Op1]
  connect_bd_net -net clkwiz_scheduler_clk_out1 [get_bd_pins clkwiz_schduler_clk_out1] [get_bd_pins clkwiz_scheduler/clk_out1]
  connect_bd_net -net clkwiz_scheduler_locked [get_bd_pins clkwiz_schdeuler_locked] [get_bd_pins clkwiz_scheduler/locked]
  connect_bd_net -net clkwiz_sysclks_clk_out2_meta [get_bd_pins clkwiz_sysclks/clk_out2] [get_bd_pins clk_meta_adapter_base_clk/clk_in]
  connect_bd_net -net clkwiz_sysclks_clk_out2 [get_bd_pins clk_out1] [get_bd_pins clkwiz_sysclks_clk_out2] [get_bd_pins clk_freq_scaler_0/s_axi_lite_aclk] [get_bd_pins clkwiz_kernel/s_axi_aclk] [get_bd_pins clkwiz_kernel2/s_axi_aclk] [get_bd_pins clk_meta_adapter_base_clk/clk_out] [get_bd_pins psreset_ctrlclk/slowest_sync_clk]
  connect_bd_net -net clkwiz_sysclks_locked [get_bd_pins clkwiz_sysclks_locked] [get_bd_pins locked] [get_bd_pins clkwiz_sysclks/locked] [get_bd_pins logic_pll_lock/Op2]
  connect_bd_net -net dma_pcie_axi_aclk_1 [get_bd_pins dma_pcie_axi_aclk] [get_bd_pins clkwiz_pcie/clk_in1] [get_bd_pins clkwiz_scheduler/clk_in1] [get_bd_pins clkwiz_sysclks/clk_in1] [get_bd_pins psreset_axi/slowest_sync_clk]
  connect_bd_net -net dma_pcie_axi_aresetn_1 [get_bd_pins dma_pcie_axi_aresetn] [get_bd_pins psreset_axi/ext_reset_in] [get_bd_pins psreset_ctrlclk/ext_reset_in] [get_bd_pins psreset_ctrlclk1/ext_reset_in]
  connect_bd_net -net perst_n_1 [get_bd_pins perst_n] [get_bd_pins clkwiz_pcie/resetn] [get_bd_pins clkwiz_scheduler/resetn] [get_bd_pins clkwiz_sysclks/resetn] [get_bd_pins psreset_ctrlclk2/ext_reset_in]
  connect_bd_net -net proc_sys_reset_0_interconnect_aresetn [get_bd_pins psreset_ctrlclk_interconnect_aresetn] [get_bd_pins clk_freq_scaler_0/s_axi_lite_aresetn] [get_bd_pins clkwiz_kernel/s_axi_aresetn] [get_bd_pins clkwiz_kernel2/s_axi_aresetn] [get_bd_pins psreset_ctrlclk/interconnect_aresetn]
  connect_bd_net -net psreset_axi_interconnect_aresetn_1 [get_bd_pins psreset_axi_interconnect_aresetn] [get_bd_pins psreset_axi/interconnect_aresetn]
  connect_bd_net -net psreset_ctrlclk1_peripheral_aresetn [get_bd_pins clk_freq_scaler_0/rst_n] [get_bd_pins psreset_ctrlclk1/peripheral_aresetn]
  connect_bd_net -net psreset_ctrlclk2_peripheral_aresetn [get_bd_pins peripheral_aresetn] [get_bd_pins psreset_ctrlclk2/peripheral_aresetn]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_pins logic_pll_lock/Res] [get_bd_pins psreset_ctrlclk/dcm_locked]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: slr1
proc create_hier_cell_slr1 { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_slr1() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:uart_rtl:1.0 bmc_uart

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 board_i2c_ctrl_IIC

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 c1_sys

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 dma_pcie_pcie_mgt

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 ds_pcie4_mgt_0

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:spi_rtl:1.0 flash_programmer_SPI_1

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:bscan_rtl:1.0 m0_bscan_0

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 ref_clk

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 ref_clk_ds

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_control_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_control_userpf_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_data_periph_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_data_static_M_AXI_slr1

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_freq_cntr_M_AXI


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_1
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_2
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_3
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_4
  create_bd_pin -dir O -from 0 -to 0 -type clk activity_out_00
  create_bd_pin -dir O -from 0 -to 0 board_i2c_ctrl_gpo
  create_bd_pin -dir I -from 2 -to 0 board_rev_pins_0
  create_bd_pin -dir O -type clk clkwiz_kernel2_clk_out1
  create_bd_pin -dir O clkwiz_kernel2_locked
  create_bd_pin -dir O -type clk clkwiz_kernel_clk_out1
  create_bd_pin -dir O clkwiz_kernel_locked
  create_bd_pin -dir O -type clk clkwiz_sysclks_clk_out2
  create_bd_pin -dir O -type rst -from 0 -to 0 s_aresetn_ctrl_00
  create_bd_pin -dir O clkwiz_sysclks_locked
  create_bd_pin -dir O -type clk dma_pcie_axi_aclk
  create_bd_pin -dir O dma_pcie_user_lnk_up
  create_bd_pin -dir IO i2c_sclk_0
  create_bd_pin -dir IO i2c_sda_0
  create_bd_pin -dir O iob_static_perst_n_out
  create_bd_pin -dir I logic_ddrcalib_op_Res
  create_bd_pin -dir O -from 0 -to 0 m2_perst_n_0
  create_bd_pin -dir I perst_n
  create_bd_pin -dir O -from 0 -to 0 slice_reset_kernel_pr_Dout
  create_bd_pin -dir I -from 0 -to 0 -type clk ssd_act_in_00
  create_bd_pin -dir O -type rst sys_reset_o_0
  create_bd_pin -dir I vauxn0_0
  create_bd_pin -dir I vauxn1_0
  create_bd_pin -dir I vauxp0_0
  create_bd_pin -dir I vauxp1_0
  create_bd_pin -dir I -from 127 -to 0 xlconcat_interrupt_dout

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl axi_bram_ctrl_0 ]
  set_property -dict [ list \
   CONFIG.ECC_TYPE {0} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $axi_bram_ctrl_0

  # Create instance: axi_bypass_addr_0, and set properties
  set block_name axi_bypass_addr
  set block_cell_name axi_bypass_addr_0
  if { [catch {set axi_bypass_addr_0 [create_bd_cell -type ip -vlnv xilinx.com:ip:shell_utils_u2_axi_bypass_addr axi_bypass_addr_0] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $axi_bypass_addr_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: axi_dwidth_converter_0, and set properties
  set axi_dwidth_converter_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dwidth_converter axi_dwidth_converter_0 ]

  # Create instance: axi_firewall_ctrl, and set properties
  set axi_firewall_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_firewall axi_firewall_ctrl ]
  set_property -dict [ list \
   CONFIG.NUM_READ_OUTSTANDING {1} \
   CONFIG.NUM_WRITE_OUTSTANDING {1} \
 ] $axi_firewall_ctrl

  # Create instance: axi_firewall_ctrl_user, and set properties
  set axi_firewall_ctrl_user [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_firewall axi_firewall_ctrl_user ]
  set_property -dict [ list \
   CONFIG.NUM_READ_OUTSTANDING {1} \
   CONFIG.NUM_WRITE_OUTSTANDING {1} \
 ] $axi_firewall_ctrl_user

  # Create instance: axi_firewall_ctrl_user_debug, and set properties
  set axi_firewall_ctrl_user_debug [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_firewall axi_firewall_ctrl_user_debug ]
  set_property -dict [ list \
   CONFIG.NUM_READ_OUTSTANDING {1} \
   CONFIG.NUM_WRITE_OUTSTANDING {1} \
 ] $axi_firewall_ctrl_user_debug

  # Create instance: axi_firewall_data, and set properties
  set axi_firewall_data [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_firewall axi_firewall_data ]
  set_property -dict [ list \
   CONFIG.ADDR_WIDTH {64} \
   CONFIG.NUM_READ_OUTSTANDING {16} \
   CONFIG.NUM_READ_THREADS {2} \
   CONFIG.NUM_WRITE_OUTSTANDING {16} \
   CONFIG.NUM_WRITE_THREADS {2} \
 ] $axi_firewall_data

  # Create instance: axi_gpio_axi_rstn, and set properties
  set axi_gpio_axi_rstn [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio axi_gpio_axi_rstn ]
  set_property -dict [ list \
   CONFIG.C_ALL_OUTPUTS {1} \
   CONFIG.C_DOUT_DEFAULT {0x00000001} \
   CONFIG.C_GPIO_WIDTH {1} \
 ] $axi_gpio_axi_rstn

  # Create instance: axi_hwicap, and set properties
  set axi_hwicap [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_hwicap axi_hwicap ]
  set_property -dict [ list \
   CONFIG.C_WRITE_FIFO_DEPTH {1024} \
 ] $axi_hwicap

  # Create instance: axi_iic_0, and set properties
  set axi_iic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_iic axi_iic_0 ]

  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_interconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {3} \
 ] $axi_interconnect_0

  # Create instance: axi_vip_0, and set properties
  set axi_vip_exp [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_vip axi_vip_exp ]
  set_property -dict [ list \
   CONFIG.INTERFACE_MODE {MASTER} \
 ] $axi_vip_exp

  # Create instance: axi_interface_monitor_dma_pcie, and set properties
  set axi_interface_monitor_dma_pcie [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interface_monitor axi_interface_monitor_dma_pcie ]
  set_property -dict [ list \
   CONFIG.CAPTURE_BURSTS {0} \
   CONFIG.COUNT_WIDTH {64} \
   CONFIG.ENABLE_COUNTERS {1} \
   CONFIG.ENABLE_DEBUG {1} \
   CONFIG.ENABLE_TRACE {0} \
   CONFIG.EN_AXI_LITE {1} \
   CONFIG.MODE_SDACCEL {1} \
 ] $axi_interface_monitor_dma_pcie

  # Create instance: axi_interface_monitor_p2p, and set properties
  set axi_interface_monitor_p2p [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interface_monitor axi_interface_monitor_p2p ]
  set_property -dict [ list \
   CONFIG.CAPTURE_BURSTS {0} \
   CONFIG.COUNT_WIDTH {64} \
   CONFIG.ENABLE_COUNTERS {1} \
   CONFIG.ENABLE_DEBUG {1} \
   CONFIG.ENABLE_TRACE {0} \
   CONFIG.EN_AXI_LITE {1} \
   CONFIG.MODE_SDACCEL {1} \
 ] $axi_interface_monitor_p2p

  # Create instance: axi_vip_ctrl_mgntpf, and set properties
  set axi_vip_ctrl_mgntpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_vip axi_vip_ctrl_mgntpf ]

  # Create instance: axi_vip_ctrl_userpf, and set properties
  set axi_vip_ctrl_userpf [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_vip axi_vip_ctrl_userpf ]

  # Create instance: axi_vip_data, and set properties
  set axi_vip_data [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_vip axi_vip_data ]

  # Create instance: base_clocking
  create_hier_cell_base_clocking $hier_obj base_clocking

  # Create instance: base_tieoffs
  create_hier_cell_base_tieoffs $hier_obj base_tieoffs

  # Create instance: blk_mem_gen_0, and set properties
  set blk_mem_gen_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen blk_mem_gen_0 ]

  # Create instance: brd_mgmt_scheduler
  create_hier_cell_brd_mgmt_scheduler $hier_obj brd_mgmt_scheduler

  # Create instance: ddr_calib_status, and set properties
  set ddr_calib_status [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_gpio ddr_calib_status ]
  set_property -dict [ list \
   CONFIG.C_ALL_INPUTS {1} \
   CONFIG.C_GPIO_WIDTH {1} \
 ] $ddr_calib_status

  # Create instance: dma_irq_config, and set properties
  set dma_irq_config [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant dma_irq_config ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {21845} \
   CONFIG.CONST_WIDTH {32} \
 ] $dma_irq_config

  # Create instance: feature_rom, and set properties
  set feature_rom [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen feature_rom ]

  # Create instance: feature_rom_ctrl, and set properties
  set feature_rom_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl feature_rom_ctrl ]
  set_property -dict [ list \
   CONFIG.ECC_TYPE {0} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $feature_rom_ctrl

  # Create instance: feature_rom_mmu, and set properties
  set feature_rom_mmu [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_mmu feature_rom_mmu ]
  set_property -dict [ list \
   CONFIG.D000_READ_WRITE_MODE {READ_ONLY} \
   CONFIG.READ_WRITE_MODE {READ_ONLY} \
 ] $feature_rom_mmu

  # Create instance: flash_programmer, and set properties
  set flash_programmer [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_quad_spi flash_programmer ]
  set_property -dict [ list \
   CONFIG.C_DUAL_QUAD_MODE {1} \
   CONFIG.C_FIFO_DEPTH {256} \
   CONFIG.C_NUM_SS_BITS {2} \
   CONFIG.C_SCK_RATIO {2} \
   CONFIG.C_SPI_MEMORY {2} \
   CONFIG.C_SPI_MODE {2} \
   CONFIG.C_TYPE_OF_AXI4_INTERFACE {0} \
   CONFIG.C_USE_STARTUP {1} \
   CONFIG.C_USE_STARTUP_INT {1} \
 ] $flash_programmer

  # Create instance: interconnect_axilite_mgmt_firewall_ctrl, and set properties
  set interconnect_axilite_mgmt_firewall_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_mgmt_firewall_ctrl ]
  set_property -dict [ list \
   CONFIG.NUM_MI {8} \
   CONFIG.NUM_SI {1} \
 ] $interconnect_axilite_mgmt_firewall_ctrl

  # Create instance: interconnect_axilite_static_primary, and set properties
  set interconnect_axilite_static_primary [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_primary ]
  set_property -dict [ list \
   CONFIG.M01_HAS_REGSLICE {0} \
   CONFIG.M02_HAS_REGSLICE {0} \
   CONFIG.M03_HAS_REGSLICE {4} \
   CONFIG.M04_HAS_REGSLICE {4} \
   CONFIG.M05_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {7} \
   CONFIG.NUM_SI {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
   CONFIG.S01_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_primary

  # Create instance: interconnect_axilite_static_secondary_a, and set properties
  set interconnect_axilite_static_secondary_a [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_a ]
  set_property -dict [ list \
   CONFIG.M09_HAS_REGSLICE {0} \
   CONFIG.M12_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {7} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_a

  # Create instance: interconnect_axilite_static_secondary_a1, and set properties
  set interconnect_axilite_static_secondary_a1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_a1 ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_a1

  # Create instance: interconnect_axilite_static_secondary_a2, and set properties
  set interconnect_axilite_static_secondary_a2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_a2 ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_a2

  # Create instance: interconnect_axilite_static_secondary_a3, and set properties
  set interconnect_axilite_static_secondary_a3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_a3 ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_a3

  # Create instance: interconnect_axilite_static_secondary_a4, and set properties
  set interconnect_axilite_static_secondary_a4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_a4 ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_a4

  # Create instance: interconnect_axilite_static_secondary_a5, and set properties
  set interconnect_axilite_static_secondary_a5 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_a5 ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {1} \
   CONFIG.NUM_SI {2} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_a5

  # Create instance: interconnect_axilite_static_secondary_b, and set properties
  set interconnect_axilite_static_secondary_b [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_secondary_b ]
  set_property -dict [ list \
   CONFIG.M02_HAS_REGSLICE {4} \
   CONFIG.NUM_MI {5} \
   CONFIG.S00_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_secondary_b

  # Create instance: interconnect_axilite_static_user, and set properties
  set interconnect_axilite_static_user [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_axilite_static_user ]
  set_property -dict [ list \
   CONFIG.NUM_MI {7} \
   CONFIG.NUM_SI {4} \
   CONFIG.S00_HAS_REGSLICE {4} \
   CONFIG.S01_HAS_REGSLICE {4} \
 ] $interconnect_axilite_static_user

  # Create instance: interconnect_user_pre_firewall, and set properties
  set interconnect_user_pre_firewall [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect interconnect_user_pre_firewall ]
  set_property -dict [ list \
   CONFIG.NUM_MI {4} \
 ] $interconnect_user_pre_firewall

  # Create instance: iob_static, and set properties
  set block_name iob_static
  set block_cell_name iob_static
  if { [catch {set iob_static [create_bd_cell -type ip -vlnv xilinx.com:ip:shell_utils_u2_iob_static iob_static] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $iob_static eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: irq_or_gate_maxifirewall, and set properties
  set irq_or_gate_maxifirewall [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic irq_or_gate_maxifirewall ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {or} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_orgate.png} \
 ] $irq_or_gate_maxifirewall

  # Create instance: irq_or_gate_mgmtfirewall, and set properties
  set irq_or_gate_mgmtfirewall [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic irq_or_gate_mgmtfirewall ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {or} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_orgate.png} \
 ] $irq_or_gate_mgmtfirewall

  # Create instance: irq_or_gate_userdebug_firewall, and set properties
  set irq_or_gate_userdebug_firewall [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic irq_or_gate_userdebug_firewall ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {or} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_orgate.png} \
 ] $irq_or_gate_userdebug_firewall

  # Create instance: irq_or_gate_userfirewall, and set properties
  set irq_or_gate_userfirewall [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic irq_or_gate_userfirewall ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {or} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_orgate.png} \
 ] $irq_or_gate_userfirewall

  # Create instance: jtag_axi_xdma, and set properties
  set jtag_axi_xdma [ create_bd_cell -type ip -vlnv xilinx.com:ip:jtag_axi jtag_axi_xdma ]
  set_property -dict [ list \
   CONFIG.PROTOCOL {2} \
 ] $jtag_axi_xdma

  # Create instance: jtag_fallback, and set properties
  set jtag_fallback [ create_bd_cell -type ip -vlnv xilinx.com:ip:debug_bridge jtag_fallback ]
  set_property -dict [ list \
   CONFIG.C_DEBUG_MODE {7} \
   CONFIG.C_NUM_BS_MASTER {1} \
 ] $jtag_fallback

  # Create instance: logic_reset_op_Res, and set properties
  set logic_reset_op_Res [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic logic_reset_op_Res ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $logic_reset_op_Res

  # Create instance: mailbox_0, and set properties
  set mailbox_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mailbox mailbox_0 ]
  set_property -dict [ list \
   CONFIG.C_ASYNC_CLKS {0} \
   CONFIG.C_IMPL_STYLE {1} \
   CONFIG.C_MAILBOX_DEPTH {4096} \
   CONFIG.C_S0_AXI_ACLK_FREQ_MHZ {51} \
   CONFIG.C_S1_AXI_ACLK_FREQ_MHZ {51} \
 ] $mailbox_0

  # Create instance: mb_mgmt_irq_concat, and set properties
  set mb_mgmt_irq_concat [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat mb_mgmt_irq_concat ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {6} \
 ] $mb_mgmt_irq_concat

  # Create instance: memc
  create_hier_cell_memc $hier_obj memc

  # Create instance: mgmt_debug_bridge, and set properties
  set mgmt_debug_bridge [ create_bd_cell -type ip -vlnv xilinx.com:ip:debug_bridge mgmt_debug_bridge ]
  set_property -dict [ list \
   CONFIG.C_BSCAN_MUX {3} \
   CONFIG.C_DEBUG_MODE {2} \
   CONFIG.C_NUM_BS_MASTER {1} \
   CONFIG.C_XVC_HW_ID {0x0002} \
 ] $mgmt_debug_bridge

  # Create instance: mgmt_debug_hub, and set properties
  set mgmt_debug_hub [ create_bd_cell -type ip -vlnv xilinx.com:ip:debug_bridge mgmt_debug_hub ]
  set_property -dict [ list \
   CONFIG.C_NUM_BS_MASTER {1} \
 ] $mgmt_debug_hub

variable XDMA_NUM_CHNL

  # Create instance: pcie_3port_switch_0, and set properties
  set pcie_3port_switch_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:pcie_3port_switch pcie_3port_switch_0 ]
  set_property -dict [ list \
   CONFIG.EMB_EP_PF0_DEVICE_ID {6987} \
   CONFIG.EMB_EP_PF1_DEVICE_ID {6988} \
   CONFIG.axist_bypass_scale {Gigabytes} \
   CONFIG.axist_bypass_size {4} \
   CONFIG.dis_ds_gt_loc {1} \
   CONFIG.dis_us_gt_loc {1} \
   CONFIG.m_axib_num_write_scale {2} \
   CONFIG.pf_swap {true} \
   CONFIG.select_ds_quad {GTH_Quad_226} \
   CONFIG.select_us_quad {GTH_Quad_224} \
   CONFIG.us_double_quad {true} \
   CONFIG.xdma_rnum_chnl $XDMA_NUM_CHNL \
   CONFIG.xdma_wnum_chnl $XDMA_NUM_CHNL \
 ] $pcie_3port_switch_0

  set clk_meta_adapter_pcie [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_metadata_adapter clk_meta_adapter_pcie ]
  set_property -dict [ list \
    CONFIG.CLK_DOMAIN {cd_pcie_00} \
  ] $clk_meta_adapter_pcie

  # Create instance: fpga_icap_ctrl_0, and set properties
  set block_name fpga_icap_ctrl
  set block_cell_name fpga_icap_ctrl_0
  if { [catch {set fpga_icap_ctrl_0 [create_bd_cell -type ip -vlnv xilinx.com:ip:shell_utils_u2_fpga_icap_ctrl fpga_icap_ctrl_0] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $fpga_icap_ctrl_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: pf_demux_0, and set properties
  set pf_demux_0 [ create_bd_cell -type ip -vlnv xilinx.com:user:pf_demux pf_demux_0 ]

  # Create instance: pr_isolation_expanded
  create_hier_cell_pr_isolation_expanded $hier_obj pr_isolation_expanded

  # Create instance: rd_mod_wr_0, and set properties
  set rd_mod_wr_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:rd_mod_wr rd_mod_wr_0 ]
  set_property -dict [ list \
   CONFIG.CFG_REG_CFG_WR_ADDR_0 {0x00120024} \
   CONFIG.CFG_REG_CFG_WR_ADDR_1 {0x00120034} \
   CONFIG.CFG_REG_CTR_VAL {50000} \
   CONFIG.CFG_REG_DATA_RD_ADDR_0 {0x000A0440} \
   CONFIG.CFG_REG_DATA_RD_ADDR_1 {0x000A0400} \
   CONFIG.CFG_REG_DATA_RD_ADDR_2 {0x000A0480} \
   CONFIG.CFG_REG_DATA_RD_ADDR_3 {0x000A0444} \
   CONFIG.CFG_REG_DATA_WR_ADDR_0 {0x001200D0} \
   CONFIG.CFG_REG_DATA_WR_ADDR_1 {0x00120100} \
   CONFIG.CFG_REG_DATA_WR_ADDR_2 {0x001200F8} \
   CONFIG.CFG_REG_DATA_WR_ADDR_3 {0x00120028} \
   CONFIG.CFG_REG_USE {2} \
   CONFIG.CFG_REG_VAL_0 {"00000000000000000010111011100000"} \
   CONFIG.CFG_REG_VAL_1 {"00000000000000000000110011100100"} \
   CONFIG.DATA_REG_USE {4} \
   CONFIG.SET_AUTO_TRIGGER {false} \
 ] $rd_mod_wr_0

  # Create instance: scratchpad_ram, and set properties
  set scratchpad_ram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen scratchpad_ram ]

  # Create instance: scratchpad_ram_ctrl, and set properties
  set scratchpad_ram_ctrl [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl scratchpad_ram_ctrl ]
  set_property -dict [ list \
   CONFIG.ECC_TYPE {0} \
   CONFIG.PROTOCOL {AXI4LITE} \
   CONFIG.SINGLE_PORT_BRAM {1} \
 ] $scratchpad_ram_ctrl

  # Create instance: shift_reg_0, and set properties
  set block_name shift_reg
  set block_cell_name shift_reg_0
  if { [catch {set shift_reg_0 [create_bd_cell -type ip -vlnv xilinx.com:ip:shell_utils_u2_shift_reg shift_reg_0] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $shift_reg_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: sys_mgmt_wiz, and set properties
  set sys_mgmt_wiz [ create_bd_cell -type ip -vlnv xilinx.com:ip:system_management_wiz sys_mgmt_wiz ]
  set_property -dict [ list \
   CONFIG.ANALOG_BANK_SELECTION {66} \
   CONFIG.AVERAGE_ENABLE_TEMPERATURE {true} \
   CONFIG.AVERAGE_ENABLE_VBRAM {true} \
   CONFIG.AVERAGE_ENABLE_VCCAUX {true} \
   CONFIG.AVERAGE_ENABLE_VCCINT {true} \
   CONFIG.CHANNEL_AVERAGING {16} \
   CONFIG.CHANNEL_ENABLE_VAUXP0_VAUXN0 {true} \
   CONFIG.CHANNEL_ENABLE_VAUXP1_VAUXN1 {true} \
   CONFIG.CHANNEL_ENABLE_VP_VN {false} \
   CONFIG.DCLK_FREQUENCY {50} \
   CONFIG.ENABLE_VBRAM_ALARM {true} \
   CONFIG.I2C_ADDRESS_OVERRIDE {false} \
   CONFIG.I2C_SLAVE_ADDRESS {00} \
   CONFIG.OT_ALARM {true} \
   CONFIG.SERIAL_INTERFACE {None} \
   CONFIG.USER_TEMP_ALARM {true} \
   CONFIG.VAUXN0_LOC {E13} \
   CONFIG.VAUXN10_LOC {K12} \
   CONFIG.VAUXN11_LOC {J11} \
   CONFIG.VAUXN12_LOC {H8} \
   CONFIG.VAUXN13_LOC {K8} \
   CONFIG.VAUXN14_LOC {C9} \
   CONFIG.VAUXN15_LOC {C8} \
   CONFIG.VAUXN1_LOC {B12} \
   CONFIG.VAUXN2_LOC {H13} \
   CONFIG.VAUXN3_LOC {K13} \
   CONFIG.VAUXN4_LOC {J10} \
   CONFIG.VAUXN5_LOC {H9} \
   CONFIG.VAUXN6_LOC {D10} \
   CONFIG.VAUXN7_LOC {A10} \
   CONFIG.VAUXN8_LOC {B11} \
   CONFIG.VAUXN9_LOC {D11} \
   CONFIG.VAUXP0_LOC {F13} \
   CONFIG.VAUXP10_LOC {L12} \
   CONFIG.VAUXP11_LOC {K11} \
   CONFIG.VAUXP12_LOC {J8} \
   CONFIG.VAUXP13_LOC {L8} \
   CONFIG.VAUXP14_LOC {D9} \
   CONFIG.VAUXP15_LOC {D8} \
   CONFIG.VAUXP1_LOC {C12} \
   CONFIG.VAUXP2_LOC {J13} \
   CONFIG.VAUXP3_LOC {L13} \
   CONFIG.VAUXP4_LOC {K10} \
   CONFIG.VAUXP5_LOC {J9} \
   CONFIG.VAUXP6_LOC {E10} \
   CONFIG.VAUXP7_LOC {B10} \
   CONFIG.VAUXP8_LOC {C11} \
   CONFIG.VAUXP9_LOC {E11} \
   CONFIG.VBRAM_ALARM_LOWER {0.82} \
   CONFIG.VBRAM_ALARM_UPPER {0.88} \
   CONFIG.VCCAUX_ALARM {true} \
   CONFIG.VCCAUX_ALARM_LOWER {1.74} \
   CONFIG.VCCAUX_ALARM_UPPER {1.86} \
   CONFIG.VCCINT_ALARM {true} \
   CONFIG.VCCINT_ALARM_LOWER {0.69} \
   CONFIG.VCCINT_ALARM_UPPER {0.75} \
 ] $sys_mgmt_wiz

  # Create instance: user_debug_bridge, and set properties
  set user_debug_bridge [ create_bd_cell -type ip -vlnv xilinx.com:ip:debug_bridge user_debug_bridge ]
  set_property -dict [ list \
   CONFIG.C_BSCAN_MUX {1} \
   CONFIG.C_DEBUG_MODE {2} \
   CONFIG.C_NUM_BS_MASTER {1} \
   CONFIG.C_XVC_HW_ID {0x0001} \
 ] $user_debug_bridge

  # Create instance: user_debug_hub, and set properties
  set user_debug_hub [ create_bd_cell -type ip -vlnv xilinx.com:ip:debug_bridge user_debug_hub ]
  set_property -dict [ list \
   CONFIG.C_NUM_BS_MASTER {1} \
 ] $user_debug_hub

 ## # Create instance: util_buf_sck, and set properties
 ## set util_buf_sck [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf util_buf_sck ]
 ## set_property -dict [ list \
 ##  CONFIG.C_BUF_TYPE {IOBUF} \
 ##] $util_buf_sck

 ## # Create instance: util_buf_sda, and set properties
 ## set util_buf_sda [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf util_buf_sda ]
 ## set_property -dict [ list \
 ##  CONFIG.C_BUF_TYPE {IOBUF} \
 ##] $util_buf_sda

  # Create instance: version_ctrl_reg_0, and set properties
  set block_name version_ctrl_reg
  set block_cell_name version_ctrl_reg_0
  if { [catch {set version_ctrl_reg_0 [create_bd_cell -type ip -vlnv xilinx.com:ip:shell_utils_u2_version_ctrl_reg version_ctrl_reg_0] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $version_ctrl_reg_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: xlconcat_0, and set properties
  set xlconcat_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconcat xlconcat_0 ]
  set_property -dict [ list \
   CONFIG.NUM_PORTS {16} \
 ] $xlconcat_0

  # Create instance: xlconst_led_1, and set properties
  set xlconst_led_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant xlconst_led_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
   CONFIG.CONST_WIDTH {1} \
 ] $xlconst_led_1

  # Create instance: xlconst_led_2, and set properties
  set xlconst_led_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant xlconst_led_2 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
   CONFIG.CONST_WIDTH {1} \
 ] $xlconst_led_2

  # Create instance: xlconst_led_3, and set properties
  set xlconst_led_3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant xlconst_led_3 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
   CONFIG.CONST_WIDTH {1} \
 ] $xlconst_led_3

  # Create instance: xlconst_led_4, and set properties
  set xlconst_led_4 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant xlconst_led_4 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {1} \
   CONFIG.CONST_WIDTH {1} \
 ] $xlconst_led_4

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant xlconstant_0 ]

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_1

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins ds_pcie4_mgt_0] [get_bd_intf_pins pcie_3port_switch_0/ds_pcie4_mgt]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins ref_clk] [get_bd_intf_pins base_clocking/ref_clk]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins bmc_uart] [get_bd_intf_pins brd_mgmt_scheduler/bmc_uart]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins c1_sys] [get_bd_intf_pins memc/c1_sys]
  connect_bd_intf_net -intf_net Conn5 [get_bd_intf_pins flash_programmer_SPI_1] [get_bd_intf_pins flash_programmer/SPI_1]
  connect_bd_intf_net -intf_net Conn7 [get_bd_intf_pins ref_clk_ds] [get_bd_intf_pins base_clocking/ref_clk_ds]
  connect_bd_intf_net -intf_net Conn9 [get_bd_intf_pins regslice_data_periph_M_AXI] [get_bd_intf_pins pr_isolation_expanded/regslice_data_periph_M_AXI]
  connect_bd_intf_net -intf_net S00_AXI_1 [get_bd_intf_pins interconnect_axilite_static_secondary_a3/S00_AXI] [get_bd_intf_pins interconnect_user_pre_firewall/M03_AXI]
  connect_bd_intf_net -intf_net S01_AXI_1 [get_bd_intf_pins brd_mgmt_scheduler/mb_bdmgmt_M01_AXI] [get_bd_intf_pins interconnect_axilite_static_primary/S01_AXI]
  connect_bd_intf_net -intf_net S01_AXI_2 [get_bd_intf_pins brd_mgmt_scheduler/embedded_scheduler_M03_AXI] [get_bd_intf_pins pr_isolation_expanded/embedded_scheduler_M03_AXI]
  connect_bd_intf_net -intf_net S01_AXI_3 [get_bd_intf_pins brd_mgmt_scheduler/M06_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a5/S01_AXI]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins blk_mem_gen_0/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_bypass_addr_0_m_axib [get_bd_intf_pins axi_bypass_addr_0/m_axib] [get_bd_intf_pins axi_interconnect_0/S02_AXI]
  connect_bd_intf_net -intf_net [get_bd_intf_nets axi_bypass_addr_0_m_axib] [get_bd_intf_pins axi_interconnect_0/S02_AXI] [get_bd_intf_pins axi_interface_monitor_p2p/MON_M_AXI]
  connect_bd_intf_net -intf_net axi_dwidth_converter_0_M_AXI [get_bd_intf_pins axi_bypass_addr_0/s_axib] [get_bd_intf_pins axi_dwidth_converter_0/M_AXI]
  connect_bd_intf_net -intf_net axi_firewall_ctrl_M_AXI [get_bd_intf_pins axi_firewall_ctrl/M_AXI] [get_bd_intf_pins interconnect_axilite_static_primary/S00_AXI]
  connect_bd_intf_net -intf_net axi_firewall_ctrl_user_M_AXI [get_bd_intf_pins axi_firewall_ctrl_user/M_AXI] [get_bd_intf_pins interconnect_axilite_static_user/S00_AXI]
  connect_bd_intf_net -intf_net axi_firewall_ctrl_user_debug_M_AXI [get_bd_intf_pins axi_firewall_ctrl_user_debug/M_AXI] [get_bd_intf_pins user_debug_bridge/S_AXI]
  connect_bd_intf_net -intf_net axi_firewall_data_M_AXI [get_bd_intf_pins axi_firewall_data/M_AXI] [get_bd_intf_pins pr_isolation_expanded/axi_firewall_data_M_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins axi_firewall_ctrl_user/S_AXI] [get_bd_intf_pins interconnect_user_pre_firewall/M00_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI1 [get_bd_intf_pins axi_firewall_data/S_AXI] [get_bd_intf_pins axi_interconnect_0/M00_AXI]
  connect_bd_intf_net -intf_net axi_interconnect_0_M01_AXI [get_bd_intf_pins interconnect_user_pre_firewall/M01_AXI] [get_bd_intf_pins mailbox_0/S0_AXI]
  connect_bd_intf_net -intf_net axi_vip_ctrl_mgntpf_M_AXI [get_bd_intf_pins axi_vip_ctrl_mgntpf/M_AXI] [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/S00_AXI]
  connect_bd_intf_net -intf_net axi_vip_ctrl_userpf_M_AXI [get_bd_intf_pins axi_vip_ctrl_userpf/M_AXI] [get_bd_intf_pins interconnect_user_pre_firewall/S00_AXI]
  connect_bd_intf_net -intf_net axi_vip_data_M_AXI [get_bd_intf_pins axi_interconnect_0/S00_AXI] [get_bd_intf_pins axi_vip_data/M_AXI]
  connect_bd_intf_net -intf_net axi_vip_exp_M_AXI [get_bd_intf_pins axi_interconnect_0/S01_AXI] [get_bd_intf_pins axi_vip_exp/M_AXI]
  connect_bd_intf_net -intf_net [get_bd_intf_nets axi_vip_data_M_AXI] [get_bd_intf_pins axi_interface_monitor_dma_pcie/MON_M_AXI] [get_bd_intf_pins axi_vip_data/M_AXI]
  connect_bd_intf_net -intf_net board_control_IIC [get_bd_intf_pins board_i2c_ctrl_IIC] [get_bd_intf_pins brd_mgmt_scheduler/board_i2c_ctrl_IIC]
  connect_bd_intf_net -intf_net brd_mgmt_scheduler_m_axi_CQDma [get_bd_intf_pins brd_mgmt_scheduler/m_axi_CQDma] [get_bd_intf_pins interconnect_axilite_static_user/S02_AXI]
  connect_bd_intf_net -intf_net brd_mgmt_scheduler_m_axi_CUDma [get_bd_intf_pins brd_mgmt_scheduler/m_axi_CUDma] [get_bd_intf_pins interconnect_axilite_static_user/S03_AXI]
  connect_bd_intf_net -intf_net brd_mgmt_scheduler_m_axi_a [get_bd_intf_pins brd_mgmt_scheduler/m_axi_a] [get_bd_intf_pins pr_isolation_expanded/S02_AXI]
  connect_bd_intf_net -intf_net feature_rom_ctrl_BRAM_PORTA [get_bd_intf_pins feature_rom/BRAM_PORTA] [get_bd_intf_pins feature_rom_ctrl/BRAM_PORTA]
  connect_bd_intf_net -intf_net feature_rom_mmu_M_AXI [get_bd_intf_pins feature_rom_ctrl/S_AXI] [get_bd_intf_pins feature_rom_mmu/M_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_M00_AXI [get_bd_intf_pins axi_firewall_ctrl/S_AXI] [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_M01_AXI [get_bd_intf_pins axi_firewall_ctrl/S_AXI_CTL] [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_M02_AXI [get_bd_intf_pins axi_firewall_ctrl_user/S_AXI_CTL] [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_M03_AXI [get_bd_intf_pins axi_firewall_data/S_AXI_CTL] [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M03_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_firewall_ctrl_M04_AXI [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M04_AXI] [get_bd_intf_pins mailbox_0/S1_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_firewall_ctrl_M05_AXI [get_bd_intf_pins axi_gpio_axi_rstn/S_AXI] [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M05_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_firewall_ctrl_M06_AXI [get_bd_intf_pins axi_firewall_ctrl_user_debug/S_AXI_CTL] [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M06_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_mgmt_firewall_ctrl_M07_AXI [get_bd_intf_pins interconnect_axilite_mgmt_firewall_ctrl/M07_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a5/S00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_M01_AXI_1 [get_bd_intf_pins interconnect_axilite_static_secondary_b/M00_AXI] [get_bd_intf_pins pr_isolation_expanded/interconnect_axilite_static_secondary_b_M00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_M03_AXI_1 [get_bd_intf_pins base_clocking/interconnect_axilite_static_secondary_a_M03_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a/M03_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_primary_M00_AXI [get_bd_intf_pins interconnect_axilite_static_primary/M00_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a/S00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_primary_M01_AXI [get_bd_intf_pins interconnect_axilite_static_primary/M01_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_b/S00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_primary_M02_AXI [get_bd_intf_pins interconnect_axilite_static_primary/M02_AXI] [get_bd_intf_pins interconnect_axilite_static_user/S01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_primary_M03_AXI [get_bd_intf_pins interconnect_axilite_static_primary/M03_AXI] [get_bd_intf_pins fpga_icap_ctrl_0/s_axi]
  connect_bd_intf_net -intf_net interconnect_axilite_static_primary_M04_AXI [get_bd_intf_pins interconnect_axilite_static_primary/M04_AXI] [get_bd_intf_pins rd_mod_wr_0/S_AXI_LITE]
  connect_bd_intf_net -intf_net interconnect_axilite_static_primary_M05_AXI [get_bd_intf_pins axi_iic_0/S_AXI] [get_bd_intf_pins interconnect_axilite_static_primary/M05_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_primary_M06_AXI [get_bd_intf_pins interconnect_axilite_static_primary/M06_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a3/S01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a1_M00_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a1/M00_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a2/S00_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a1_M01_AXI [get_bd_intf_pins brd_mgmt_scheduler/S00_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a1/M01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a2_M00_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a2/M00_AXI] [get_bd_intf_pins sys_mgmt_wiz/S_AXI_LITE]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a3_M00_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a3/M00_AXI] [get_bd_intf_pins version_ctrl_reg_0/s_axi_lite]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a5_M00_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a5/M00_AXI] [get_bd_intf_pins mgmt_debug_bridge/S_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a_M00_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a/M00_AXI] [get_bd_intf_pins pr_isolation_expanded/axi_firewall_ctrl_M_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a_M01_AXI [get_bd_intf_pins ddr_calib_status/S_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a/M01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a_M02_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a/M02_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a2/S01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a_M04_AXI [get_bd_intf_pins base_clocking/interconnect_axilite_static_secondary_a_M04_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a/M04_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a_M05_AXI [get_bd_intf_pins base_clocking/s_axi_lite] [get_bd_intf_pins interconnect_axilite_static_secondary_a/M05_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_a_M06_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_a/M06_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_a4/S01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_b_M01_AXI [get_bd_intf_pins interconnect_axilite_static_secondary_b/M01_AXI] [get_bd_intf_pins scratchpad_ram_ctrl/S_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_b_M02_AXI [get_bd_intf_pins brd_mgmt_scheduler/interconnect_axilite_static_secondary_b_M03_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_b/M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_b_M03_AXI [get_bd_intf_pins brd_mgmt_scheduler/interconnect_axilite_static_secondary_b_M04_AXI] [get_bd_intf_pins interconnect_axilite_static_secondary_b/M03_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_secondary_b_M04_AXI [get_bd_intf_pins flash_programmer/AXI_LITE] [get_bd_intf_pins interconnect_axilite_static_secondary_b/M04_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_user_M00_AXI [get_bd_intf_pins interconnect_axilite_static_user/M00_AXI] [get_bd_intf_pins pr_isolation_expanded/axi_firewall_ctrl_user_M_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_user_M01_AXI [get_bd_intf_pins brd_mgmt_scheduler/host] [get_bd_intf_pins interconnect_axilite_static_user/M01_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_user_M02_AXI [get_bd_intf_pins feature_rom_mmu/S_AXI] [get_bd_intf_pins interconnect_axilite_static_user/M02_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_user_M03_AXI [get_bd_intf_pins brd_mgmt_scheduler/interconnect_axilite_static_user_M03_AXI] [get_bd_intf_pins interconnect_axilite_static_user/M03_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_user_M04_AXI [get_bd_intf_pins axi_interface_monitor_dma_pcie/S_AXI] [get_bd_intf_pins interconnect_axilite_static_user/M04_AXI]
  connect_bd_intf_net -intf_net interconnect_axilite_static_user_M05_AXI [get_bd_intf_pins axi_interface_monitor_p2p/S_AXI] [get_bd_intf_pins interconnect_axilite_static_user/M05_AXI]
  connect_bd_intf_net -intf_net interconnect_user_pre_firewall_M02_AXI [get_bd_intf_pins axi_firewall_ctrl_user_debug/S_AXI] [get_bd_intf_pins interconnect_user_pre_firewall/M02_AXI]
  connect_bd_intf_net -intf_net jtag_axi_xdma_M_AXI [get_bd_intf_pins axi_bram_ctrl_0/S_AXI] [get_bd_intf_pins jtag_axi_xdma/M_AXI]
  connect_bd_intf_net -intf_net jtag_fallback_m0_bscan [get_bd_intf_pins jtag_fallback/m0_bscan] [get_bd_intf_pins mgmt_debug_bridge/prim_bscan]
  connect_bd_intf_net -intf_net mgmt_debug_bridge_m0_bscan [get_bd_intf_pins mgmt_debug_bridge/m0_bscan] [get_bd_intf_pins mgmt_debug_hub/S_BSCAN]
  connect_bd_intf_net -intf_net mgmt_debug_hub_m0_bscan [get_bd_intf_pins brd_mgmt_scheduler/BSCAN] [get_bd_intf_pins mgmt_debug_hub/m0_bscan]
  connect_bd_intf_net -intf_net pcie_3port_switch_0_M_AXI [get_bd_intf_pins axi_vip_data/S_AXI] [get_bd_intf_pins pcie_3port_switch_0/M_AXI]
  connect_bd_intf_net -intf_net pcie_3port_switch_0_M_AXI_BYPASS [get_bd_intf_pins axi_dwidth_converter_0/S_AXI] [get_bd_intf_pins pcie_3port_switch_0/M_AXI_BYPASS]
  connect_bd_intf_net -intf_net pcie_3port_switch_0_M_AXI_LITE [get_bd_intf_pins pcie_3port_switch_0/M_AXI_LITE] [get_bd_intf_pins pf_demux_0/m_axil]
  connect_bd_intf_net -intf_net pcie_3port_switch_0_us_pcie4_mgt [get_bd_intf_pins dma_pcie_pcie_mgt] [get_bd_intf_pins pcie_3port_switch_0/us_pcie4_mgt]
  connect_bd_intf_net -intf_net fpga_icap_ctrl_0_m_axi [get_bd_intf_pins axi_hwicap/S_AXI_LITE] [get_bd_intf_pins interconnect_axilite_static_secondary_a4/M00_AXI]
  connect_bd_intf_net -intf_net fpga_icap_ctrl_0_m_axi1 [get_bd_intf_pins interconnect_axilite_static_secondary_a4/S00_AXI] [get_bd_intf_pins fpga_icap_ctrl_0/m_axi]
  connect_bd_intf_net -intf_net pf_demux_0_S_AXI_MGNTPF [get_bd_intf_pins axi_vip_ctrl_mgntpf/S_AXI] [get_bd_intf_pins pf_demux_0/S_AXI_MGNTPF]
  connect_bd_intf_net -intf_net pf_demux_0_S_AXI_USERPF [get_bd_intf_pins axi_vip_ctrl_userpf/S_AXI] [get_bd_intf_pins pf_demux_0/S_AXI_USERPF]
  connect_bd_intf_net -intf_net pr_isolation_expanded_M_AXI [get_bd_intf_pins regslice_control_M_AXI] [get_bd_intf_pins pr_isolation_expanded/regslice_control_M_AXI]
  connect_bd_intf_net -intf_net pr_isolation_expanded_M_AXI1 [get_bd_intf_pins regslice_data_static_M_AXI_slr1] [get_bd_intf_pins pr_isolation_expanded/regslice_data_static_M_AXI_slr1]
  connect_bd_intf_net -intf_net pr_isolation_expanded_M_AXI2 [get_bd_intf_pins regslice_control_userpf_M_AXI] [get_bd_intf_pins pr_isolation_expanded/regslice_control_userpf_M_AXI]
  connect_bd_intf_net -intf_net pr_isolation_expanded_M_AXI6 [get_bd_intf_pins regslice_freq_cntr_M_AXI] [get_bd_intf_pins pr_isolation_expanded/regslice_freq_cntr_M_AXI]
  connect_bd_intf_net -intf_net rd_mod_wr_0_M_AXI_LITE [get_bd_intf_pins interconnect_axilite_static_secondary_a1/S00_AXI] [get_bd_intf_pins rd_mod_wr_0/M_AXI_LITE]
  connect_bd_intf_net -intf_net scratchpad_ram_ctrl_BRAM_PORTA [get_bd_intf_pins scratchpad_ram/BRAM_PORTA] [get_bd_intf_pins scratchpad_ram_ctrl/BRAM_PORTA]
  connect_bd_intf_net -intf_net user_debug_bridge_m0_bscan [get_bd_intf_pins user_debug_bridge/m0_bscan] [get_bd_intf_pins user_debug_hub/S_BSCAN]
  connect_bd_intf_net -intf_net user_debug_hub_m0_bscan [get_bd_intf_pins m0_bscan_0] [get_bd_intf_pins user_debug_hub/m0_bscan]

  # Create port connections
  connect_bd_net -net M03_ARESETN_1 [get_bd_pins brd_mgmt_scheduler/s_axi_aresetn] [get_bd_pins interconnect_axilite_static_user/M03_ARESETN]
  #connect_bd_net -net Net [get_bd_pins i2c_sclk_0] [get_bd_pins util_buf_sck/IOBUF_IO_IO]
  #connect_bd_net -net Net1 [get_bd_pins i2c_sda_0] [get_bd_pins util_buf_sda/IOBUF_IO_IO]
  connect_bd_net -net axi_firewall_ctrl_mi_r_error [get_bd_pins axi_firewall_ctrl/mi_r_error] [get_bd_pins irq_or_gate_mgmtfirewall/Op2]
  connect_bd_net -net axi_firewall_ctrl_mi_w_error [get_bd_pins axi_firewall_ctrl/mi_w_error] [get_bd_pins irq_or_gate_mgmtfirewall/Op1]
  connect_bd_net -net axi_firewall_ctrl_user_debug_mi_r_error [get_bd_pins axi_firewall_ctrl_user_debug/mi_r_error] [get_bd_pins irq_or_gate_userdebug_firewall/Op2]
  connect_bd_net -net axi_firewall_ctrl_user_debug_mi_w_error [get_bd_pins axi_firewall_ctrl_user_debug/mi_w_error] [get_bd_pins irq_or_gate_userdebug_firewall/Op1]
  connect_bd_net -net axi_firewall_ctrl_user_mi_r_error [get_bd_pins axi_firewall_ctrl_user/mi_r_error] [get_bd_pins irq_or_gate_userfirewall/Op2]
  connect_bd_net -net axi_firewall_ctrl_user_mi_w_error [get_bd_pins axi_firewall_ctrl_user/mi_w_error] [get_bd_pins irq_or_gate_userfirewall/Op1]
  connect_bd_net -net axi_firewall_data_mi_r_error [get_bd_pins axi_firewall_data/mi_r_error] [get_bd_pins irq_or_gate_maxifirewall/Op2]
  connect_bd_net -net axi_firewall_data_mi_w_error [get_bd_pins axi_firewall_data/mi_w_error] [get_bd_pins irq_or_gate_maxifirewall/Op1]
  connect_bd_net -net axi_gpio_axi_rstn_gpio_io_o [get_bd_pins axi_gpio_axi_rstn/gpio_io_o] [get_bd_pins base_clocking/aux_reset_in]
  connect_bd_net -net axi_gpio_rstn [get_bd_pins base_clocking/psreset_axi_interconnect_aresetn] [get_bd_pins brd_mgmt_scheduler/dma_pcie_reset_n] [get_bd_pins interconnect_axilite_static_primary/ARESETN] [get_bd_pins interconnect_axilite_static_primary/S00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a5/ARESETN] [get_bd_pins interconnect_axilite_static_user/M01_ARESETN] [get_bd_pins interconnect_axilite_static_user/S00_ARESETN] [get_bd_pins interconnect_axilite_static_user/S02_ARESETN] [get_bd_pins interconnect_axilite_static_user/S03_ARESETN] [get_bd_pins pr_isolation_expanded/dma_pcie_axi_aresetn]
  connect_bd_net -net axi_hwicap_ip2intc_irpt [get_bd_pins axi_hwicap/ip2intc_irpt] [get_bd_pins brd_mgmt_scheduler/HWICAP_intr]
  connect_bd_net -net axi_iic_0_iic2intc_irpt [get_bd_pins axi_iic_0/iic2intc_irpt] [get_bd_pins brd_mgmt_scheduler/In12]
  ##connect_bd_net -net axi_iic_0_scl_o [get_bd_pins axi_iic_0/scl_o] [get_bd_pins util_buf_sck/IOBUF_IO_I]
  ##connect_bd_net -net axi_iic_0_scl_t [get_bd_pins axi_iic_0/scl_t] [get_bd_pins util_buf_sck/IOBUF_IO_T]
  ##connect_bd_net -net axi_iic_0_sda_o [get_bd_pins axi_iic_0/sda_o] [get_bd_pins util_buf_sda/IOBUF_IO_I]
  ##connect_bd_net -net axi_iic_0_sda_t [get_bd_pins axi_iic_0/sda_t] [get_bd_pins util_buf_sda/IOBUF_IO_T]
  connect_bd_net -net base_clocking_IBUF_DS_ODIV2 [get_bd_pins base_clocking/buf_refclk_ibuf_IBUF_DS_ODIV2] [get_bd_pins pcie_3port_switch_0/us_sys_clk]
  connect_bd_net -net base_clocking_IBUF_DS_ODIV3 [get_bd_pins base_clocking/IBUF_DS_ODIV2] [get_bd_pins pcie_3port_switch_0/ds_sys_clk]
  connect_bd_net -net base_clocking_IBUF_OUT [get_bd_pins base_clocking/buf_refclk_ibuf_IBUF_OUT] [get_bd_pins pcie_3port_switch_0/us_sys_clk_gt]
  connect_bd_net -net base_clocking_IBUF_OUT1 [get_bd_pins base_clocking/IBUF_OUT] [get_bd_pins pcie_3port_switch_0/ds_sys_clk_gt]
  connect_bd_net -net base_clocking_clk_out1 [get_bd_pins clkwiz_kernel_clk_out1] [get_bd_pins base_clocking/clkwiz_kernel_clk_out1]
  connect_bd_net -net base_clocking_clk_out2 [get_bd_pins clkwiz_sysclks_clk_out2] [get_bd_pins axi_firewall_ctrl_user_debug/aclk] [get_bd_pins axi_iic_0/s_axi_aclk] [get_bd_pins base_clocking/clkwiz_sysclks_clk_out2] [get_bd_pins brd_mgmt_scheduler/clkwiz_sysclks_clk_out2] [get_bd_pins ddr_calib_status/s_axi_aclk] [get_bd_pins feature_rom_ctrl/s_axi_aclk] [get_bd_pins feature_rom_mmu/aclk] [get_bd_pins flash_programmer/ext_spi_clk] [get_bd_pins flash_programmer/s_axi_aclk] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M04_ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M06_ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M07_ACLK] [get_bd_pins interconnect_axilite_static_primary/M00_ACLK] [get_bd_pins interconnect_axilite_static_primary/M01_ACLK] [get_bd_pins interconnect_axilite_static_primary/M02_ACLK] [get_bd_pins interconnect_axilite_static_primary/M04_ACLK] [get_bd_pins interconnect_axilite_static_primary/M05_ACLK] [get_bd_pins interconnect_axilite_static_primary/M06_ACLK] [get_bd_pins interconnect_axilite_static_primary/S01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/M00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/M01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/M02_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/M03_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/M04_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/M05_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/M06_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a/S00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a1/ACLK] [get_bd_pins interconnect_axilite_static_secondary_a1/M00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a1/M01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a1/S00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a2/ACLK] [get_bd_pins interconnect_axilite_static_secondary_a2/M00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a2/S00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a2/S01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a3/ACLK] [get_bd_pins interconnect_axilite_static_secondary_a3/M00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a3/S00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a3/S01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a4/S01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a5/M00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a5/S00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a5/S01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_b/ACLK] [get_bd_pins interconnect_axilite_static_secondary_b/M00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_b/M01_ACLK] [get_bd_pins interconnect_axilite_static_secondary_b/M02_ACLK] [get_bd_pins interconnect_axilite_static_secondary_b/M03_ACLK] [get_bd_pins interconnect_axilite_static_secondary_b/M04_ACLK] [get_bd_pins interconnect_axilite_static_secondary_b/S00_ACLK] [get_bd_pins interconnect_axilite_static_user/ACLK] [get_bd_pins interconnect_axilite_static_user/M00_ACLK] [get_bd_pins interconnect_axilite_static_user/M02_ACLK] [get_bd_pins interconnect_axilite_static_user/M06_ACLK] [get_bd_pins interconnect_axilite_static_user/S01_ACLK] [get_bd_pins interconnect_user_pre_firewall/M01_ACLK] [get_bd_pins interconnect_user_pre_firewall/M02_ACLK] [get_bd_pins interconnect_user_pre_firewall/M03_ACLK] [get_bd_pins mailbox_0/S0_AXI_ACLK] [get_bd_pins mailbox_0/S1_AXI_ACLK] [get_bd_pins mgmt_debug_bridge/s_axi_aclk] [get_bd_pins mgmt_debug_hub/clk] [get_bd_pins pr_isolation_expanded/clkwiz_sysclks_clk_out2] [get_bd_pins rd_mod_wr_0/clk] [get_bd_pins scratchpad_ram_ctrl/s_axi_aclk] [get_bd_pins shift_reg_0/clk] [get_bd_pins sys_mgmt_wiz/s_axi_aclk] [get_bd_pins user_debug_bridge/s_axi_aclk] [get_bd_pins user_debug_hub/clk] [get_bd_pins version_ctrl_reg_0/s_axi_lite_aclk]
  connect_bd_net -net base_clocking_clk_out3 [get_bd_pins base_clocking/clk_out1] [get_bd_pins brd_mgmt_scheduler/clkwiz_sysclks_clk_out3]
  connect_bd_net -net base_clocking_clk_out4 [get_bd_pins clkwiz_kernel2_clk_out1] [get_bd_pins base_clocking/clkwiz_kernel2_clk_out1]
  connect_bd_net -net base_clocking_interconnect_aresetn  [get_bd_pins s_aresetn_ctrl_00] [get_bd_pins axi_firewall_ctrl_user_debug/aresetn] [get_bd_pins axi_iic_0/s_axi_aresetn] [get_bd_pins base_clocking/psreset_ctrlclk_interconnect_aresetn] [get_bd_pins brd_mgmt_scheduler/S00_ARESETN] [get_bd_pins brd_mgmt_scheduler/psreset_ctrlclk_interconnect_aresetn] [get_bd_pins ddr_calib_status/s_axi_aresetn] [get_bd_pins feature_rom_ctrl/s_axi_aresetn] [get_bd_pins feature_rom_mmu/aresetn] [get_bd_pins flash_programmer/s_axi_aresetn] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M04_ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M06_ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M07_ARESETN] [get_bd_pins interconnect_axilite_static_primary/M00_ARESETN] [get_bd_pins interconnect_axilite_static_primary/M01_ARESETN] [get_bd_pins interconnect_axilite_static_primary/M02_ARESETN] [get_bd_pins interconnect_axilite_static_primary/M04_ARESETN] [get_bd_pins interconnect_axilite_static_primary/M05_ARESETN] [get_bd_pins interconnect_axilite_static_primary/M06_ARESETN] [get_bd_pins interconnect_axilite_static_primary/S01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/M00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/M01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/M02_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/M03_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/M04_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/M05_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/M06_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a/S00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a1/ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a1/M00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a1/M01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a1/S00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a2/ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a2/M00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a2/S00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a2/S01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a3/ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a3/M00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a3/S00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a3/S01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a4/S01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a5/M00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a5/S00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a5/S01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_b/ARESETN] [get_bd_pins interconnect_axilite_static_secondary_b/M00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_b/M01_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_b/M02_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_b/M03_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_b/M04_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_b/S00_ARESETN] [get_bd_pins interconnect_axilite_static_user/ARESETN] [get_bd_pins interconnect_axilite_static_user/M00_ARESETN] [get_bd_pins interconnect_axilite_static_user/M02_ARESETN] [get_bd_pins interconnect_axilite_static_user/M06_ARESETN] [get_bd_pins interconnect_axilite_static_user/S01_ARESETN] [get_bd_pins interconnect_user_pre_firewall/M01_ARESETN] [get_bd_pins interconnect_user_pre_firewall/M02_ARESETN] [get_bd_pins interconnect_user_pre_firewall/M03_ARESETN] [get_bd_pins mailbox_0/S0_AXI_ARESETN] [get_bd_pins mailbox_0/S1_AXI_ARESETN] [get_bd_pins mgmt_debug_bridge/s_axi_aresetn] [get_bd_pins pr_isolation_expanded/psreset_ctrlclk_interconnect_aresetn] [get_bd_pins rd_mod_wr_0/rst_n] [get_bd_pins scratchpad_ram_ctrl/s_axi_aresetn] [get_bd_pins shift_reg_0/rstn] [get_bd_pins sys_mgmt_wiz/s_axi_aresetn] [get_bd_pins user_debug_bridge/s_axi_aresetn] [get_bd_pins version_ctrl_reg_0/s_axi_lite_aresetn]
  connect_bd_net -net base_clocking_locked [get_bd_pins clkwiz_kernel_locked] [get_bd_pins base_clocking/clkwiz_kernel_locked]
  connect_bd_net -net base_clocking_locked1 [get_bd_pins clkwiz_sysclks_locked] [get_bd_pins base_clocking/clkwiz_sysclks_locked] [get_bd_pins pr_isolation_expanded/clkwiz_sysclks_locked]
  connect_bd_net -net base_clocking_locked2 [get_bd_pins clkwiz_kernel2_locked] [get_bd_pins base_clocking/clkwiz_kernel2_locked]
  connect_bd_net -net base_clocking_peripheral_aresetn [get_bd_pins axi_hwicap/s_axi_aresetn] [get_bd_pins base_clocking/peripheral_aresetn] [get_bd_pins interconnect_axilite_static_primary/M03_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a4/ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a4/M00_ARESETN] [get_bd_pins interconnect_axilite_static_secondary_a4/S00_ARESETN] [get_bd_pins fpga_icap_ctrl_0/resetn]
  connect_bd_net -net base_tieoffs_dout [get_bd_pins axi_hwicap/eos_in] [get_bd_pins base_tieoffs/const_gnd_1_dout] [get_bd_pins flash_programmer/usrcclkts]
  connect_bd_net -net board_control_gpo [get_bd_pins board_i2c_ctrl_gpo] [get_bd_pins brd_mgmt_scheduler/board_i2c_ctrl_gpo]
  connect_bd_net -net board_rev_pins_0_1 [get_bd_pins board_rev_pins_0] [get_bd_pins rd_mod_wr_0/board_rev_pins] [get_bd_pins version_ctrl_reg_0/board_rev_pins]
  connect_bd_net -net brd_mgmt_scheduler_gpio2_io_o [get_bd_pins brd_mgmt_scheduler/gpio2_io_o] [get_bd_pins xlconcat_0/In13]
  connect_bd_net -net brd_mgmt_scheduler_gpio_io_o [get_bd_pins brd_mgmt_scheduler/gpio_io_o] [get_bd_pins xlconcat_0/In12]
  connect_bd_net -net brd_mgmt_scheduler_irq_sr0 [get_bd_pins brd_mgmt_scheduler/irq_sr0] [get_bd_pins xlconcat_0/In0]
  connect_bd_net -net brd_mgmt_scheduler_irq_sr1 [get_bd_pins brd_mgmt_scheduler/irq_sr1] [get_bd_pins xlconcat_0/In1]
  connect_bd_net -net brd_mgmt_scheduler_irq_sr2 [get_bd_pins brd_mgmt_scheduler/irq_sr2] [get_bd_pins xlconcat_0/In2]
  connect_bd_net -net brd_mgmt_scheduler_irq_sr3 [get_bd_pins brd_mgmt_scheduler/irq_sr3] [get_bd_pins xlconcat_0/In3]
  connect_bd_net -net clkwiz_schduler_clk_out1_1 [get_bd_pins base_clocking/clkwiz_schduler_clk_out1] [get_bd_pins brd_mgmt_scheduler/clkwiz_schduler_clk_out1] [get_bd_pins interconnect_axilite_static_user/M03_ACLK]
  connect_bd_net -net dcm_locked1_1 [get_bd_pins base_clocking/locked1] [get_bd_pins brd_mgmt_scheduler/dcm_locked1]
  connect_bd_net -net dcm_locked_1 [get_bd_pins base_clocking/clkwiz_schdeuler_locked] [get_bd_pins brd_mgmt_scheduler/clkwiz_schdeuler_locked]
  connect_bd_net -net dcm_locked_2 [get_bd_pins base_clocking/locked] [get_bd_pins brd_mgmt_scheduler/dcm_locked]
  connect_bd_net -net clk_meta_pcie [get_bd_pins pcie_3port_switch_0/axi_aclk] [get_bd_pins clk_meta_adapter_pcie/clk_in]
  connect_bd_net -net dma_pcie_axi_aclk [get_bd_pins dma_pcie_axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins axi_bypass_addr_0/aclk] [get_bd_pins axi_dwidth_converter_0/s_axi_aclk] [get_bd_pins axi_firewall_ctrl/aclk] [get_bd_pins axi_firewall_ctrl_user/aclk] [get_bd_pins axi_firewall_data/aclk] [get_bd_pins axi_gpio_axi_rstn/s_axi_aclk] [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_interconnect_0/S01_ACLK] [get_bd_pins axi_interconnect_0/S02_ACLK] [get_bd_pins axi_vip_exp/aclk] [get_bd_pins axi_interface_monitor_dma_pcie/mon_clk] [get_bd_pins axi_interface_monitor_p2p/mon_clk] [get_bd_pins axi_vip_ctrl_mgntpf/aclk] [get_bd_pins axi_vip_ctrl_userpf/aclk] [get_bd_pins axi_vip_data/aclk] [get_bd_pins base_clocking/dma_pcie_axi_aclk] [get_bd_pins brd_mgmt_scheduler/dma_pcie_axi_aclk] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M00_ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M01_ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M02_ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M03_ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M05_ACLK] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/S00_ACLK] [get_bd_pins interconnect_axilite_static_primary/ACLK] [get_bd_pins interconnect_axilite_static_primary/S00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a5/ACLK] [get_bd_pins interconnect_axilite_static_user/M01_ACLK] [get_bd_pins interconnect_axilite_static_user/M04_ACLK] [get_bd_pins interconnect_axilite_static_user/M05_ACLK] [get_bd_pins interconnect_axilite_static_user/S00_ACLK] [get_bd_pins interconnect_axilite_static_user/S02_ACLK] [get_bd_pins interconnect_axilite_static_user/S03_ACLK] [get_bd_pins interconnect_user_pre_firewall/ACLK] [get_bd_pins interconnect_user_pre_firewall/M00_ACLK] [get_bd_pins interconnect_user_pre_firewall/S00_ACLK] [get_bd_pins jtag_axi_xdma/aclk] [get_bd_pins clk_meta_adapter_pcie/clk_out] [get_bd_pins pf_demux_0/pcie_clk] [get_bd_pins pr_isolation_expanded/dma_pcie_s_axi_aclk]
  connect_bd_net -net dma_pcie_axi_aresetn [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn] [get_bd_pins axi_bypass_addr_0/aresetn] [get_bd_pins axi_dwidth_converter_0/s_axi_aresetn] [get_bd_pins axi_firewall_ctrl/aresetn] [get_bd_pins axi_firewall_ctrl_user/aresetn] [get_bd_pins axi_firewall_data/aresetn] [get_bd_pins axi_gpio_axi_rstn/s_axi_aresetn] [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_interconnect_0/S01_ARESETN] [get_bd_pins axi_interconnect_0/S02_ARESETN] [get_bd_pins axi_vip_exp/aresetn] [get_bd_pins axi_interface_monitor_dma_pcie/mon_resetn] [get_bd_pins axi_interface_monitor_p2p/mon_resetn] [get_bd_pins axi_vip_ctrl_mgntpf/aresetn] [get_bd_pins axi_vip_ctrl_userpf/aresetn] [get_bd_pins axi_vip_data/aresetn] [get_bd_pins base_clocking/dma_pcie_axi_aresetn] [get_bd_pins brd_mgmt_scheduler/Op2] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M00_ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M01_ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M02_ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M03_ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/M05_ARESETN] [get_bd_pins interconnect_axilite_mgmt_firewall_ctrl/S00_ARESETN] [get_bd_pins interconnect_axilite_static_user/M04_ARESETN] [get_bd_pins interconnect_axilite_static_user/M05_ARESETN] [get_bd_pins interconnect_user_pre_firewall/ARESETN] [get_bd_pins interconnect_user_pre_firewall/M00_ARESETN] [get_bd_pins interconnect_user_pre_firewall/S00_ARESETN] [get_bd_pins jtag_axi_xdma/aresetn] [get_bd_pins pcie_3port_switch_0/axi_aresetn] [get_bd_pins pf_demux_0/pcie_aresetn]
  connect_bd_net -net flash_programmer_ip2intc_irpt [get_bd_pins brd_mgmt_scheduler/QSPI_intr] [get_bd_pins flash_programmer/ip2intc_irpt]
  connect_bd_net -net gpio_io_i_1 [get_bd_pins logic_ddrcalib_op_Res] [get_bd_pins ddr_calib_status/gpio_io_i]
  connect_bd_net -net iob_static_perst_n_out1 [get_bd_pins iob_static_perst_n_out] [get_bd_pins base_clocking/perst_n] [get_bd_pins brd_mgmt_scheduler/iob_static_perst_n_out] [get_bd_pins iob_static/perst_n_out] [get_bd_pins logic_reset_op_Res/Op1] [get_bd_pins pcie_3port_switch_0/sys_reset]
  connect_bd_net -net irq_cu_1 [get_bd_pins brd_mgmt_scheduler/irq_cu] [get_bd_pins pr_isolation_expanded/s_cu_intc_INTERRUPT]
  connect_bd_net -net irq_or_gate_maxifirewall_Res [get_bd_pins irq_or_gate_maxifirewall/Res] [get_bd_pins xlconcat_0/In8]
  connect_bd_net -net irq_or_gate_mgmtfirewall_Res [get_bd_pins irq_or_gate_mgmtfirewall/Res] [get_bd_pins xlconcat_0/In10]
  connect_bd_net -net irq_or_gate_userdebug_firewall_Res [get_bd_pins irq_or_gate_userdebug_firewall/Res] [get_bd_pins xlconcat_0/In14]
  connect_bd_net -net irq_or_gate_userfirewall_Res [get_bd_pins irq_or_gate_userfirewall/Res] [get_bd_pins xlconcat_0/In9]
  connect_bd_net -net logic_reset_op_Res_1 [get_bd_pins logic_reset_op_Res/Res] [get_bd_pins memc/logic_reset_op_Res]
  connect_bd_net -net mailbox_0_Interrupt_0 [get_bd_pins mailbox_0/Interrupt_0] [get_bd_pins xlconcat_0/In4]
  connect_bd_net -net mailbox_0_Interrupt_1 [get_bd_pins mailbox_0/Interrupt_1] [get_bd_pins xlconcat_0/In11]
  connect_bd_net -net mb_mgmt_irq_concat_dout [get_bd_pins brd_mgmt_scheduler/In0] [get_bd_pins mb_mgmt_irq_concat/dout]
  connect_bd_net -net memc_IBUF_OUT [get_bd_pins base_clocking/clk_in1] [get_bd_pins memc/IBUF_OUT]
  connect_bd_net -net pcie_3port_switch_0_ds_user_lnk_up [get_bd_pins pcie_3port_switch_0/ds_user_lnk_up] [get_bd_pins fpga_icap_ctrl_0/pcie_dsp_link_up]
  connect_bd_net -net pcie_3port_switch_0_ep_phy_link_down [get_bd_pins pcie_3port_switch_0/ep_phy_link_down] [get_bd_pins fpga_icap_ctrl_0/pcie_ep_link_down]
  connect_bd_net -net pcie_3port_switch_0_sys_reset_o [get_bd_pins sys_reset_o_0] [get_bd_pins pcie_3port_switch_0/sys_reset_o]
  connect_bd_net -net pcie_3port_switch_0_us_user_lnk_up [get_bd_pins dma_pcie_user_lnk_up] [get_bd_pins pcie_3port_switch_0/us_user_lnk_up] [get_bd_pins fpga_icap_ctrl_0/pcie_usp_link_up]
  connect_bd_net -net pcie_3port_switch_0_usr_irq_ack [get_bd_pins brd_mgmt_scheduler/irq_ack] [get_bd_pins pcie_3port_switch_0/usr_irq_ack]
  connect_bd_net -net pr_isolation_expanded_Dout [get_bd_pins slice_reset_kernel_pr_Dout] [get_bd_pins pr_isolation_expanded/slice_reset_kernel_pr_Dout]
  connect_bd_net -net pr_isolation_expanded_perst_n_out [get_bd_pins perst_n] [get_bd_pins iob_static/perst_n_in]
  connect_bd_net -net s_axi_aclk_1 [get_bd_pins axi_hwicap/icap_clk] [get_bd_pins axi_hwicap/s_axi_aclk] [get_bd_pins base_clocking/clk_out2] [get_bd_pins brd_mgmt_scheduler/s_axi_aclk] [get_bd_pins interconnect_axilite_static_primary/M03_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a4/ACLK] [get_bd_pins interconnect_axilite_static_secondary_a4/M00_ACLK] [get_bd_pins interconnect_axilite_static_secondary_a4/S00_ACLK] [get_bd_pins fpga_icap_ctrl_0/clk]
  connect_bd_net -net shift_reg_0_data_in [get_bd_pins ssd_act_in_00] [get_bd_pins shift_reg_0/data_in]
  connect_bd_net -net shift_reg_0_data_out [get_bd_pins activity_out_00] [get_bd_pins shift_reg_0/data_out]
  connect_bd_net -net sys_mgmt_wiz_alarm_out [get_bd_pins mb_mgmt_irq_concat/In5] [get_bd_pins sys_mgmt_wiz/alarm_out]
  connect_bd_net -net sys_mgmt_wiz_ot_out [get_bd_pins mb_mgmt_irq_concat/In1] [get_bd_pins sys_mgmt_wiz/ot_out]
  connect_bd_net -net sys_mgmt_wiz_user_temp_alarm_out [get_bd_pins mb_mgmt_irq_concat/In0] [get_bd_pins sys_mgmt_wiz/user_temp_alarm_out]
  connect_bd_net -net sys_mgmt_wiz_vbram_alarm_out [get_bd_pins mb_mgmt_irq_concat/In4] [get_bd_pins sys_mgmt_wiz/vbram_alarm_out]
  connect_bd_net -net sys_mgmt_wiz_vccaux_alarm_out [get_bd_pins mb_mgmt_irq_concat/In3] [get_bd_pins sys_mgmt_wiz/vccaux_alarm_out]
  connect_bd_net -net sys_mgmt_wiz_vccint_alarm_out [get_bd_pins mb_mgmt_irq_concat/In2] [get_bd_pins sys_mgmt_wiz/vccint_alarm_out]
  #connect_bd_net -net util_buf_sck_IOBUF_IO_O [get_bd_pins axi_iic_0/scl_i] [get_bd_pins util_buf_sck/IOBUF_IO_O]
  #connect_bd_net -net util_buf_sda_IOBUF_IO_O [get_bd_pins axi_iic_0/sda_i] [get_bd_pins util_buf_sda/IOBUF_IO_O]
  connect_bd_net -net vauxn0_0_1 [get_bd_pins vauxn0_0] [get_bd_pins sys_mgmt_wiz/vauxn0]
  connect_bd_net -net vauxn1_0_1 [get_bd_pins vauxn1_0] [get_bd_pins sys_mgmt_wiz/vauxn1]
  connect_bd_net -net vauxp0_0_1 [get_bd_pins vauxp0_0] [get_bd_pins sys_mgmt_wiz/vauxp0]
  connect_bd_net -net vauxp1_0_1 [get_bd_pins vauxp1_0] [get_bd_pins sys_mgmt_wiz/vauxp1]
  connect_bd_net -net version_ctrl_reg_0_rev_ctrl_val [get_bd_pins rd_mod_wr_0/rev_ctrl_val] [get_bd_pins version_ctrl_reg_0/rev_ctrl_val]
  connect_bd_net -net xlconcat_2_dout [get_bd_pins pcie_3port_switch_0/usr_irq_req] [get_bd_pins xlconcat_0/dout]
  connect_bd_net -net xlconcat_interrupt_dout_1 [get_bd_pins xlconcat_interrupt_dout] [get_bd_pins pr_isolation_expanded/xlconcat_interrupt_dout]
  connect_bd_net -net xlconst_led_1_dout [get_bd_pins FPGA_LED_1] [get_bd_pins xlconst_led_1/dout]
  connect_bd_net -net xlconst_led_2_dout [get_bd_pins FPGA_LED_2] [get_bd_pins xlconst_led_2/dout]
  connect_bd_net -net xlconst_led_3_dout [get_bd_pins FPGA_LED_3] [get_bd_pins xlconst_led_3/dout]
  connect_bd_net -net xlconst_led_4_dout [get_bd_pins FPGA_LED_4] [get_bd_pins xlconst_led_4/dout]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins m2_perst_n_0] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_pins xlconcat_0/In5] [get_bd_pins xlconcat_0/In6] [get_bd_pins xlconcat_0/In7] [get_bd_pins xlconcat_0/In15] [get_bd_pins xlconstant_1/dout]
  connect_bd_net -net xlconstant_2_dout [get_bd_pins dma_irq_config/dout] [get_bd_pins pcie_3port_switch_0/usr_irq_function_number]

  # Restore current instance
  current_bd_instance $oldCurInst
}

# Hierarchical cell: static_region
proc create_hier_cell_static_region { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_msg_id "BD_TCL-102" "ERROR" "create_hier_cell_static_region() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:spi_rtl:1.0 SPI_1_0

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:uart_rtl:1.0 bmc_uart

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:iic_rtl:1.0 board_i2c_ctrl_IIC

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 c1_sys

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 dma_pcie_pcie_mgt

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 ds_pcie4_mgt_0

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:bscan_rtl:1.0 m0_bscan_0

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 ref_clk

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 ref_clk_ds

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_control_M_AXI_slr1

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_control_periph_M_AXI_slr1

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_control_userpf_M_AXI_slr1

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_data_periph_M_AXI

  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:aximm_rtl:1.0 regslice_data_static_M_AXI_slr1


  # Create pins
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_1
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_2
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_3
  create_bd_pin -dir O -from 0 -to 0 FPGA_LED_4
  create_bd_pin -dir O -from 0 -to 0 -type clk activity_out_0
  create_bd_pin -dir O -from 0 -to 0 board_i2c_ctrl_gpo
  create_bd_pin -dir I -from 2 -to 0 board_rev_pins_0
  create_bd_pin -dir O -type clk clkwiz_kernel2_clk_out1
  create_bd_pin -dir O clkwiz_kernel2_locked_slr1
  create_bd_pin -dir O -type clk clkwiz_kernel_clk_out1
  create_bd_pin -dir O clkwiz_kernel_locked_slr1
  create_bd_pin -dir O -type clk clkwiz_sysclks_clk_out2
  create_bd_pin -dir O -type rst -from 0 -to 0 s_aresetn_ctrl_00
  create_bd_pin -dir O clkwiz_sysclks_locked_slr1
  create_bd_pin -dir O -type clk dma_pcie_axi_aclk
  create_bd_pin -dir O dma_pcie_user_lnk_up_slr1
  create_bd_pin -dir O -from 0 -to 0 dout_0
  create_bd_pin -dir IO i2c_sclk_0
  create_bd_pin -dir IO i2c_sda_0
  create_bd_pin -dir O iob_static_perst_n_out
  create_bd_pin -dir I logic_ddrcalib_op_Res
  create_bd_pin -dir I perst_n
  create_bd_pin -dir O -from 0 -to 0 slice_reset_kernel_pr_Dout_slr1
  create_bd_pin -dir I -from 0 -to 0 -type clk ssd_act_in_0
  create_bd_pin -dir O -type rst sys_reset_o_0
  create_bd_pin -dir I vauxn0_0
  create_bd_pin -dir I vauxn1_0
  create_bd_pin -dir I vauxp0_0
  create_bd_pin -dir I vauxp1_0
  create_bd_pin -dir I -from 127 -to 0 xlconcat_interrupt_dout

  # Create instance: slr1
  create_hier_cell_slr1 $hier_obj slr1

  # Create interface connections
  connect_bd_intf_net -intf_net Conn1 [get_bd_intf_pins ds_pcie4_mgt_0] [get_bd_intf_pins slr1/ds_pcie4_mgt_0]
  connect_bd_intf_net -intf_net Conn2 [get_bd_intf_pins ref_clk_ds] [get_bd_intf_pins slr1/ref_clk_ds]
  connect_bd_intf_net -intf_net Conn3 [get_bd_intf_pins SPI_1_0] [get_bd_intf_pins slr1/flash_programmer_SPI_1]
  connect_bd_intf_net -intf_net Conn4 [get_bd_intf_pins m0_bscan_0] [get_bd_intf_pins slr1/m0_bscan_0]
  connect_bd_intf_net -intf_net Conn6 [get_bd_intf_pins regslice_data_periph_M_AXI] [get_bd_intf_pins slr1/regslice_data_periph_M_AXI]
  connect_bd_intf_net -intf_net c0_sys_1 [get_bd_intf_pins c1_sys] [get_bd_intf_pins slr1/c1_sys]
  connect_bd_intf_net -intf_net ref_clk_1 [get_bd_intf_pins ref_clk] [get_bd_intf_pins slr1/ref_clk]
  connect_bd_intf_net -intf_net static_region_IIC [get_bd_intf_pins board_i2c_ctrl_IIC] [get_bd_intf_pins slr1/board_i2c_ctrl_IIC]
  connect_bd_intf_net -intf_net static_region_M_AXI [get_bd_intf_pins regslice_control_M_AXI_slr1] [get_bd_intf_pins slr1/regslice_control_M_AXI]
  connect_bd_intf_net -intf_net static_region_M_AXI1 [get_bd_intf_pins regslice_data_static_M_AXI_slr1] [get_bd_intf_pins slr1/regslice_data_static_M_AXI_slr1]
  connect_bd_intf_net -intf_net static_region_M_AXI2 [get_bd_intf_pins regslice_control_userpf_M_AXI_slr1] [get_bd_intf_pins slr1/regslice_control_userpf_M_AXI]
  connect_bd_intf_net -intf_net static_region_M_AXI3 [get_bd_intf_pins regslice_control_periph_M_AXI_slr1] [get_bd_intf_pins slr1/regslice_freq_cntr_M_AXI]
  connect_bd_intf_net -intf_net static_region_bmc_uart [get_bd_intf_pins bmc_uart] [get_bd_intf_pins slr1/bmc_uart]
  connect_bd_intf_net -intf_net static_region_pcie_mgt [get_bd_intf_pins dma_pcie_pcie_mgt] [get_bd_intf_pins slr1/dma_pcie_pcie_mgt]

  # Create port connections
  connect_bd_net -net BUFG_I_0_1 [get_bd_pins ssd_act_in_0] [get_bd_pins slr1/ssd_act_in_00]
  connect_bd_net -net Net [get_bd_pins i2c_sda_0] [get_bd_pins slr1/i2c_sda_0]
  connect_bd_net -net Net1 [get_bd_pins i2c_sclk_0] [get_bd_pins slr1/i2c_sclk_0]
  connect_bd_net -net aclk_1 [get_bd_pins dma_pcie_axi_aclk] [get_bd_pins slr1/dma_pcie_axi_aclk]
  connect_bd_net -net board_rev_pins_0_1 [get_bd_pins board_rev_pins_0] [get_bd_pins slr1/board_rev_pins_0]
  connect_bd_net -net dynamic_region_Res [get_bd_pins logic_ddrcalib_op_Res] [get_bd_pins slr1/logic_ddrcalib_op_Res]
  connect_bd_net -net dynamic_region_xlconcat_interrupt_dout [get_bd_pins xlconcat_interrupt_dout] [get_bd_pins slr1/xlconcat_interrupt_dout]
  connect_bd_net -net perst_n_1 [get_bd_pins perst_n] [get_bd_pins slr1/perst_n]
  connect_bd_net -net slowest_sync_clk_1 [get_bd_pins clkwiz_sysclks_clk_out2] [get_bd_pins slr1/clkwiz_sysclks_clk_out2]
  connect_bd_net -net slowest_sync_aresetn_1 [get_bd_pins s_aresetn_ctrl_00] [get_bd_pins slr1/s_aresetn_ctrl_00]
  connect_bd_net -net slr1_BUFG_O_0 [get_bd_pins activity_out_0] [get_bd_pins slr1/activity_out_00]
  connect_bd_net -net slr1_FPGA_LED_1 [get_bd_pins FPGA_LED_1] [get_bd_pins slr1/FPGA_LED_1]
  connect_bd_net -net slr1_FPGA_LED_2 [get_bd_pins FPGA_LED_2] [get_bd_pins slr1/FPGA_LED_2]
  connect_bd_net -net slr1_FPGA_LED_3 [get_bd_pins FPGA_LED_3] [get_bd_pins slr1/FPGA_LED_3]
  connect_bd_net -net slr1_FPGA_LED_4 [get_bd_pins FPGA_LED_4] [get_bd_pins slr1/FPGA_LED_4]
  connect_bd_net -net slr1_dout_0 [get_bd_pins dout_0] [get_bd_pins slr1/m2_perst_n_0]
  connect_bd_net -net slr1_sys_reset_o_0 [get_bd_pins sys_reset_o_0] [get_bd_pins slr1/sys_reset_o_0]
  connect_bd_net -net slr1_user_lnk_up [get_bd_pins dma_pcie_user_lnk_up_slr1] [get_bd_pins slr1/dma_pcie_user_lnk_up]
  connect_bd_net -net static_region_Dout [get_bd_pins slice_reset_kernel_pr_Dout_slr1] [get_bd_pins slr1/slice_reset_kernel_pr_Dout]
  connect_bd_net -net static_region_clk_out1 [get_bd_pins clkwiz_kernel_clk_out1] [get_bd_pins slr1/clkwiz_kernel_clk_out1]
  connect_bd_net -net static_region_clk_out3 [get_bd_pins clkwiz_kernel2_clk_out1] [get_bd_pins slr1/clkwiz_kernel2_clk_out1]
  connect_bd_net -net static_region_gpo [get_bd_pins board_i2c_ctrl_gpo] [get_bd_pins slr1/board_i2c_ctrl_gpo]
  connect_bd_net -net static_region_iob_static_perst_n_out [get_bd_pins iob_static_perst_n_out] [get_bd_pins slr1/iob_static_perst_n_out]
  connect_bd_net -net static_region_locked [get_bd_pins clkwiz_kernel_locked_slr1] [get_bd_pins slr1/clkwiz_kernel_locked]
  connect_bd_net -net static_region_locked1 [get_bd_pins clkwiz_sysclks_locked_slr1] [get_bd_pins slr1/clkwiz_sysclks_locked]
  connect_bd_net -net static_region_locked2 [get_bd_pins clkwiz_kernel2_locked_slr1] [get_bd_pins slr1/clkwiz_kernel2_locked]
  connect_bd_net -net vauxn0_0_1 [get_bd_pins vauxn0_0] [get_bd_pins slr1/vauxn0_0]
  connect_bd_net -net vauxn1_0_1 [get_bd_pins vauxn1_0] [get_bd_pins slr1/vauxn1_0]
  connect_bd_net -net vauxp0_0_1 [get_bd_pins vauxp0_0] [get_bd_pins slr1/vauxp0_0]
  connect_bd_net -net vauxp1_0_1 [get_bd_pins vauxp1_0] [get_bd_pins slr1/vauxp1_0]

  # Restore current instance
  current_bd_instance $oldCurInst
}


# Procedure to create entire design; Provide argument to make
# procedure reusable. If parentCell is "", will use root.
proc create_root_design { parentCell } {

  variable script_folder
  variable design_name

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create instance: static_region
  create_hier_cell_static_region [current_bd_instance .] static_region

  # Create interface connection/s
  connect_bd_intf_net -intf_net c0_sys_1 [get_bd_intf_ports c1_sys] [get_bd_intf_pins static_region/c1_sys]
  connect_bd_intf_net -intf_net ref_clk_1 [get_bd_intf_ports ref_clk] [get_bd_intf_pins static_region/ref_clk]
  connect_bd_intf_net -intf_net ref_clk_ds_1 [get_bd_intf_ports ref_clk_ds] [get_bd_intf_pins static_region/ref_clk_ds]
  connect_bd_intf_net -intf_net static_region_IIC [get_bd_intf_ports iic] [get_bd_intf_pins static_region/board_i2c_ctrl_IIC]
  connect_bd_intf_net -intf_net static_region_SPI_1_0 [get_bd_intf_ports spi_1] [get_bd_intf_pins static_region/SPI_1_0]
  connect_bd_intf_net -intf_net static_region_bmc_uart [get_bd_intf_ports io_uart_cmc_00] [get_bd_intf_pins static_region/bmc_uart]
  connect_bd_intf_net -intf_net static_region_ds_pcie4_mgt_0 [get_bd_intf_ports io_gt_pcie_01] [get_bd_intf_pins static_region/ds_pcie4_mgt_0]
  connect_bd_intf_net -intf_net static_region_m0_bscan_0 [get_bd_intf_ports m0_bscan] [get_bd_intf_pins static_region/m0_bscan_0]
  connect_bd_intf_net -intf_net static_region_pcie_mgt [get_bd_intf_ports io_gt_pcie_00] [get_bd_intf_pins static_region/dma_pcie_pcie_mgt]
  connect_bd_intf_net -intf_net static_region_regslice_control_M_AXI_slr1 [get_bd_intf_ports regslice_control_M_AXI_slr1] [get_bd_intf_pins static_region/regslice_control_M_AXI_slr1]
  connect_bd_intf_net -intf_net static_region_regslice_control_periph_M_AXI_slr1 [get_bd_intf_ports regslice_control_periph_M_AXI_slr1] [get_bd_intf_pins static_region/regslice_control_periph_M_AXI_slr1]
  connect_bd_intf_net -intf_net static_region_regslice_control_userpf_M_AXI_slr1 [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1] [get_bd_intf_pins static_region/regslice_control_userpf_M_AXI_slr1]
  connect_bd_intf_net -intf_net static_region_regslice_data_periph_M_AXI [get_bd_intf_ports regslice_data_periph_M_AXI] [get_bd_intf_pins static_region/regslice_data_periph_M_AXI]
  connect_bd_intf_net -intf_net static_region_regslice_data_static_M_AXI_slr1 [get_bd_intf_ports regslice_data_static_M_AXI_slr1] [get_bd_intf_pins static_region/regslice_data_static_M_AXI_slr1]

  # Create port connections
  connect_bd_net -net BUFG_I_0_1_e [get_bd_ports ssd_act_in] [get_bd_pins static_region/ssd_act_in_0]
  connect_bd_net -net Net_e [get_bd_ports i2c_sda_0] [get_bd_pins static_region/i2c_sda_0]
  connect_bd_net -net Net1_e [get_bd_ports i2c_sclk_0] [get_bd_pins static_region/i2c_sclk_0]
  connect_bd_net -net board_rev_pins_0_1_e [get_bd_ports board_rev_pins_0] [get_bd_pins static_region/board_rev_pins_0]
  connect_bd_net -net dynamic_region_logic_ddrcalib_op_Res_e [get_bd_ports logic_ddrcalib_op_Res] [get_bd_pins static_region/logic_ddrcalib_op_Res]
  connect_bd_net -net dynamic_region_m2_perst_n_0_e [get_bd_ports m2_perst_n_0_0] [get_bd_pins static_region/dout_0]
  connect_bd_net -net dynamic_region_xlconcat_interrupt_dout_e [get_bd_ports xlconcat_interrupt_dout] [get_bd_pins static_region/xlconcat_interrupt_dout]
  connect_bd_net -net perst_n_1_e [get_bd_ports perst_n] [get_bd_pins static_region/perst_n]
  connect_bd_net -net slowest_sync_clk_1_e [get_bd_ports clkwiz_sysclks_clk_out2] [get_bd_pins static_region/clkwiz_sysclks_clk_out2]
  connect_bd_net -net slowest_sync_rst_1_e [get_bd_ports s_aresetn_ctrl_00] [get_bd_pins static_region/s_aresetn_ctrl_00]
  connect_bd_net -net static_region_BUFG_O_0_e [get_bd_ports activity_out] [get_bd_pins static_region/activity_out_0]
  connect_bd_net -net static_region_FPGA_LED_1_e [get_bd_ports FPGA_LED1] [get_bd_pins static_region/FPGA_LED_1]
  connect_bd_net -net static_region_FPGA_LED_2_e [get_bd_ports FPGA_LED2] [get_bd_pins static_region/FPGA_LED_2]
  connect_bd_net -net static_region_FPGA_LED_3_e [get_bd_ports FPGA_LED3] [get_bd_pins static_region/FPGA_LED_3]
  connect_bd_net -net static_region_FPGA_LED_4_e [get_bd_ports FPGA_LED4] [get_bd_pins static_region/FPGA_LED_4]
  connect_bd_net -net static_region_clk_out1_e [get_bd_ports clkwiz_kernel_clk_out1] [get_bd_pins static_region/clkwiz_kernel_clk_out1]
  connect_bd_net -net static_region_clk_out3_e [get_bd_ports clkwiz_kernel2_clk_out1] [get_bd_pins static_region/clkwiz_kernel2_clk_out1]
  connect_bd_net -net static_region_clkwiz_kernel2_locked_slr1_e [get_bd_ports clkwiz_kernel2_locked_slr1] [get_bd_pins static_region/clkwiz_kernel2_locked_slr1]
  connect_bd_net -net static_region_clkwiz_kernel_locked_slr1_e [get_bd_ports clkwiz_kernel_locked_slr1] [get_bd_pins static_region/clkwiz_kernel_locked_slr1]
  connect_bd_net -net static_region_clkwiz_sysclks_locked_slr1_e [get_bd_ports clkwiz_sysclks_locked_slr1] [get_bd_pins static_region/clkwiz_sysclks_locked_slr1]
  connect_bd_net -net static_region_dma_pcie_axi_aclk_e [get_bd_ports dma_pcie_axi_aclk] [get_bd_pins static_region/dma_pcie_axi_aclk]
  connect_bd_net -net static_region_gpo_e [get_bd_ports iic_reset_n] [get_bd_pins static_region/board_i2c_ctrl_gpo]
  connect_bd_net -net static_region_iob_static_perst_n_out_e [get_bd_ports iob_static_perst_n_out] [get_bd_pins static_region/iob_static_perst_n_out]
  connect_bd_net -net static_region_slice_reset_kernel_pr_Dout_slr1_e [get_bd_ports slice_reset_kernel_pr_Dout_slr1] [get_bd_pins static_region/slice_reset_kernel_pr_Dout_slr1]
  connect_bd_net -net static_region_sys_reset_o_0_e [get_bd_ports sys_reset_o_0] [get_bd_pins static_region/sys_reset_o_0]
  connect_bd_net -net static_region_user_lnk_up_e [get_bd_ports dma_pcie_user_lnk_up_slr1] [get_bd_pins static_region/dma_pcie_user_lnk_up_slr1]
  connect_bd_net -net vauxn0_0_1_e [get_bd_ports vauxn0_0] [get_bd_pins static_region/vauxn0_0]
  connect_bd_net -net vauxn1_0_1_e [get_bd_ports vauxn1_0] [get_bd_pins static_region/vauxn1_0]
  connect_bd_net -net vauxp0_0_1_e [get_bd_ports vauxp0_0] [get_bd_pins static_region/vauxp0_0]
  connect_bd_net -net vauxp1_0_1_e [get_bd_ports vauxp1_0] [get_bd_pins static_region/vauxp1_0]

  # Create address segments
  #assign_bd_address -offset 0x004000000000 -range 0x000100000000 -target_address_space [get_bd_addr_spaces static_region/slr1/axi_bypass_addr_0/m_axib] -force
  assign_bd_address -offset 0x004000000000 -range 0x000100000000 -target_address_space [get_bd_addr_spaces static_region/slr1/axi_bypass_addr_0/m_axib] [get_bd_addr_segs -of [get_bd_intf_ports regslice_data_static_M_AXI_slr1]] -force
  #assign_bd_address -offset 0x008000000000 -range 0x001000000000 -target_address_space [get_bd_addr_spaces static_region/slr1/axi_bypass_addr_0/m_axib] -force
  assign_bd_address -offset 0x008000000000 -range 0x001000000000 -target_address_space [get_bd_addr_spaces static_region/slr1/axi_bypass_addr_0/m_axib] [get_bd_addr_segs -of [get_bd_intf_ports regslice_data_periph_M_AXI]] -force
  assign_bd_address -offset 0x44A00000 -range 0x00002000 -target_address_space [get_bd_addr_spaces static_region/slr1/jtag_axi_xdma/Data] [get_bd_addr_segs static_region/slr1/axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00000000 -range 0x000200000000 -target_address_space [get_bd_addr_spaces static_region/slr1/pcie_3port_switch_0/M_AXI_BYPASS] [get_bd_addr_segs static_region/slr1/axi_bypass_addr_0/s_axib/reg0] -force
  #assign_bd_address -offset 0x004000000000 -range 0x000100000000 -target_address_space [get_bd_addr_spaces static_region/slr1/pcie_3port_switch_0/M_AXI] -force
  assign_bd_address -offset 0x004000000000 -range 0x000100000000 -target_address_space [get_bd_addr_spaces static_region/slr1/pcie_3port_switch_0/M_AXI] [get_bd_addr_segs -of [get_bd_intf_ports regslice_data_static_M_AXI_slr1]] -force
  #assign_bd_address -offset 0x008000000000 -range 0x008000000000 -target_address_space [get_bd_addr_spaces static_region/slr1/pcie_3port_switch_0/M_AXI] -force
  assign_bd_address -offset 0x008000000000 -range 0x008000000000 -target_address_space [get_bd_addr_spaces static_region/slr1/pcie_3port_switch_0/M_AXI] [get_bd_addr_segs -of [get_bd_intf_ports regslice_data_periph_M_AXI]] -force
  assign_bd_address -offset 0x00000000 -range 0x000100000000 -target_address_space [get_bd_addr_spaces static_region/slr1/pcie_3port_switch_0/M_AXI_LITE] [get_bd_addr_segs static_region/slr1/pf_demux_0/m_axil/reg0] -force
  assign_bd_address -offset 0x00020000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/fpga_icap_ctrl_0/m_axi] [get_bd_addr_segs static_region/slr1/axi_hwicap/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0x000D0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_firewall_ctrl/S_AXI_CTL/Control] -force
  assign_bd_address -offset 0x000E0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_firewall_ctrl_user/S_AXI_CTL/Control] -force
  assign_bd_address -offset 0x000E1000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_firewall_ctrl_user_debug/S_AXI_CTL/Control] -force
  assign_bd_address -offset 0x000F0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_firewall_data/S_AXI_CTL/Control] -force
  assign_bd_address -offset 0x00033000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_gpio_axi_rstn/S_AXI/Reg] -force
  assign_bd_address -offset 0x00131000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_gpio_mb_ctrl/S_AXI/Reg] -force
  assign_bd_address -offset 0x00020000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_hwicap/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0x00350000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_iic_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00240000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_dma_pcie/S_AXI/Reg] -force
  assign_bd_address -offset 0x00240000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_dma_pcie/S_AXI/Reg] -force
  assign_bd_address -offset 0x00250000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_p2p/S_AXI/Reg] -force
  assign_bd_address -offset 0x00250000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_p2p/S_AXI/Reg] -force
  assign_bd_address -offset 0x00220000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_mb_interrupts/S_AXI/Reg] -force
  assign_bd_address -offset 0x00041000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/board_i2c_ctrl/S_AXI/Reg] -force
  assign_bd_address -offset 0x00053000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/base_clocking/clk_freq_scaler_0/s_axi_lite/reg0] -force
  assign_bd_address -offset 0x00051000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/base_clocking/clkwiz_kernel2/s_axi_lite/Reg] -force
  assign_bd_address -offset 0x00050000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/base_clocking/clkwiz_kernel/s_axi_lite/Reg] -force
  assign_bd_address -offset 0x00190000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/cq_bram_ctlr/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00190000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/cq_bram_ctlr/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00032000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/ddr_calib_status/S_AXI/Reg] -force
  assign_bd_address -offset 0x01000000 -range 0x00800000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_M_AXI_slr1]] -force
  assign_bd_address -offset 0x01800000 -range 0x00400000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1]] -force
  assign_bd_address -offset 0x00052000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_periph_M_AXI_slr1]] -force
  assign_bd_address -offset 0x01800000 -range 0x00400000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1]] -force
  assign_bd_address -offset 0x00180000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_scheduler_hw_0/host/reg0] -force
  assign_bd_address -offset 0x00180000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_scheduler_hw_0/host/reg0] -force
  assign_bd_address -offset 0x000B0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/feature_rom_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x000B0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/feature_rom_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00040000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/flash_programmer/AXI_LITE/Reg] -force
  assign_bd_address -offset 0x00030000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/pr_isolation_expanded/gate_pr/S_AXI/Reg] -force
  assign_bd_address -offset 0x00210000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/mailbox_0/S1_AXI/Reg] -force
  assign_bd_address -offset 0x00200000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/mailbox_0/S0_AXI/Reg] -force
  assign_bd_address -offset 0x00140000 -range 0x00020000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/mb_bram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x000C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/mgmt_debug_bridge/S_AXI/Reg0] -force
  assign_bd_address -offset 0x00380000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/fpga_icap_ctrl_0/s_axi/reg0] -force
  assign_bd_address -offset 0x00360000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/rd_mod_wr_0/S_AXI_LITE/reg0] -force
  assign_bd_address -offset 0x00120000 -range 0x00002000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/register_map_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00160000 -range 0x00020000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/scheduler_bram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00031000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/scratchpad_ram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x000A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/sys_mgmt_wiz/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0x000C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/user_debug_bridge/S_AXI/Reg0] -force
  assign_bd_address -offset 0x00330000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_MGNTPF] [get_bd_addr_segs static_region/slr1/version_ctrl_reg_0/s_axi_lite/reg0] -force
  assign_bd_address -offset 0x00330000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/pf_demux_0/S_AXI_USERPF] [get_bd_addr_segs static_region/slr1/version_ctrl_reg_0/s_axi_lite/reg0] -force
  assign_bd_address -offset 0x00120000 -range 0x00002000 -target_address_space [get_bd_addr_spaces static_region/slr1/rd_mod_wr_0/M_AXI_LITE] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/register_map_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x000A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/rd_mod_wr_0/M_AXI_LITE] [get_bd_addr_segs static_region/slr1/sys_mgmt_wiz/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0x00240000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CQDma] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_dma_pcie/S_AXI/Reg] -force
  assign_bd_address -offset 0x00240000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CUDma] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_dma_pcie/S_AXI/Reg] -force
  assign_bd_address -offset 0x00250000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CQDma] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_p2p/S_AXI/Reg] -force
  assign_bd_address -offset 0x00250000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CUDma] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_p2p/S_AXI/Reg] -force
  assign_bd_address -offset 0x00190000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CQDma] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/cq_bram_ctlr/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00190000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CUDma] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/cq_bram_ctlr/S_AXI/Mem0] -force
  assign_bd_address -offset 0x01800000 -range 0x00400000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CQDma] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1]] -force
  assign_bd_address -offset 0x01800000 -range 0x00400000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CUDma] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1]] -force
  assign_bd_address -offset 0x00180000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CQDma] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_scheduler_hw_0/host/reg0] -force
  assign_bd_address -offset 0x00180000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CUDma] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_scheduler_hw_0/host/reg0] -force
  assign_bd_address -offset 0x000B0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CQDma] [get_bd_addr_segs static_region/slr1/feature_rom_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x000B0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/CuDmaController_0/Data_m_axi_CUDma] [get_bd_addr_segs static_region/slr1/feature_rom_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x01800000 -range 0x00400000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/cuisr_0/Data_m_axi_a] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1]] -force
  assign_bd_address -offset 0x00131000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_gpio_mb_ctrl/S_AXI/Reg] -force
  assign_bd_address -offset 0x00133000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_gpio_wdt/S_AXI/Reg] -force
  assign_bd_address -offset 0x00020000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/axi_hwicap/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0x00350000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/axi_iic_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x41210000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_intc_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00240000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_dma_pcie/S_AXI/Reg] -force
  assign_bd_address -offset 0x00250000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/axi_interface_monitor_p2p/S_AXI/Reg] -force
  assign_bd_address -offset 0x00220000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_mb_interrupts/S_AXI/Reg] -force
  assign_bd_address -offset 0x00260000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_timebase_wdt/S_AXI/Reg] -force
  assign_bd_address -offset 0x00230000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_uartlite_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x01E00000 -range 0x00200000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/axi_vip_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00041000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/board_i2c_ctrl/S_AXI/Reg] -force
  assign_bd_address -offset 0x00053000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/base_clocking/clk_freq_scaler_0/s_axi_lite/reg0] -force
  assign_bd_address -offset 0x00051000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/base_clocking/clkwiz_kernel2/s_axi_lite/Reg] -force
  assign_bd_address -offset 0x00050000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/base_clocking/clkwiz_kernel/s_axi_lite/Reg] -force
  assign_bd_address -offset 0x00190000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/cq_bram_ctlr/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00032000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/ddr_calib_status/S_AXI/Reg] -force
  assign_bd_address -offset 0x01000000 -range 0x00800000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data]  [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_M_AXI_slr1]] -force
  assign_bd_address -offset 0x00052000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data]  [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_periph_M_AXI_slr1]] -force
  assign_bd_address -offset 0x01800000 -range 0x00400000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data]  [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1]] -force
  assign_bd_address -offset 0x00180000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_scheduler_hw_0/host/reg0] -force
  assign_bd_address -offset 0x000B0000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/feature_rom_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00040000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/flash_programmer/AXI_LITE/Reg] -force
  assign_bd_address -offset 0x00030000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/pr_isolation_expanded/gate_pr/S_AXI/Reg] -force
  assign_bd_address -offset 0x00000000 -range 0x00020000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Instruction] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_0_local_memory/lmb_bram_if_cntlr/SLMB1/Mem] -force
  assign_bd_address -offset 0x00000000 -range 0x00020000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_0_local_memory/lmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x00140000 -range 0x00020000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/mb_bram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x41400000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/mdm_board_control/S_AXI/Reg] -force
  assign_bd_address -offset 0x000C0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/mgmt_debug_bridge/S_AXI/Reg0] -force
  assign_bd_address -offset 0x00380000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/fpga_icap_ctrl_0/s_axi/reg0] -force
  assign_bd_address -offset 0x00360000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/rd_mod_wr_0/S_AXI_LITE/reg0] -force
  assign_bd_address -offset 0x00120000 -range 0x00002000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/board_management/register_map_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00160000 -range 0x00020000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/scheduler_bram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x00031000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/scratchpad_ram_ctrl/S_AXI/Mem0] -force
  assign_bd_address -offset 0x000A0000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/sys_mgmt_wiz/S_AXI_LITE/Reg] -force
  assign_bd_address -offset 0x00330000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/board_management/microblaze_board_control/Data] [get_bd_addr_segs static_region/slr1/version_ctrl_reg_0/s_axi_lite/reg0] -force
  assign_bd_address -offset 0x41200000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/axi_intc_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x00190000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/cq_bram_ctlr/S_AXI/Mem0] -force
  assign_bd_address -offset 0x01800000 -range 0x00400000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler/Data] [get_bd_addr_segs -of [get_bd_intf_ports regslice_control_userpf_M_AXI_slr1]] -force
  assign_bd_address -offset 0x00180000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_scheduler_hw_0/host/reg0] -force
  assign_bd_address -offset 0x00000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler_lm/lmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x00000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler/Instruction] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler_lm/lmb_bram_if_cntlr/SLMB1/Mem] -force
  assign_bd_address -offset 0x41400000 -range 0x00001000 -target_address_space [get_bd_addr_spaces static_region/slr1/brd_mgmt_scheduler/embedded_schduler/microblaze_scheduler/Data] [get_bd_addr_segs static_region/slr1/brd_mgmt_scheduler/mdm_board_control/S_AXI/Reg] -force


  # Restore current instance
  current_bd_instance $oldCurInst

}
# End of create_root_design()

##################################################################
# MAIN FLOW
##################################################################
create_root_design ""

# -----------------------------------------------------------------------------------------------------------------------------------------#
# (4) Set driver mode for SDK
# -----------------------------------------------------------------------------------------------------------------------------------------#
set_driver_mode subcore

#==========================================================================================================================================#
# (5) Write Partition Metadata
#==========================================================================================================================================#

# Write json metadata fragments for each endpoint

set file_name "partition_metadata.fragment.json"
add_ipfile -fileType elaboratedData $file_name

# Create json addressable_endpoints data_type
puts_ipfile $file_name "\{"
puts_ipfile $file_name "    \"addressable_endpoints\" : \{"

# List all endpoints in foreach loop - check last endpoint has 'is_last' flag set in get_params.xit
foreach {endpoint} [list ep_uuid_rom_00 ep_firewall_ctrl_mgmt_00 ep_firewall_ctrl_user_00 ep_firewall_ctrl_debug_00 ep_aclk_kernel_00 ep_aclk_kernel_01 ep_ddr_mem_calib_00 ep_card_flash_program_00 ep_ddr_mem_srsr_gate_00 ep_mailbox_mgmt_00 ep_debug_bscan_mgmt_00 ep_cmc_regmap_00 ep_cmp_sysmon_00 axi_hwicap ep_mailbox_user_00 ep_debug_bscan_user_00] {

    if {[dict exists $endpoint_dictionary $endpoint]} {

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Create json endpoint
        #----------------------------------------------------------------------------------------------------------------------------------#

        puts_ipfile $file_name "        \"$endpoint\" : \{"

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Define "offset, range, pf, regabs" metadata
        #----------------------------------------------------------------------------------------------------------------------------------#

        puts_ipfile $file_name "            \"offset\" : \"[dict get $endpoint_dictionary $endpoint offset]\","
        puts_ipfile $file_name "            \"range\" : \"[dict get $endpoint_dictionary $endpoint range]\","
        puts_ipfile $file_name "            \"pcie_physical_function\" : \"[dict get $endpoint_dictionary $endpoint pf]\","

        # Check if bar, interrupt or firmware metadata is to be added to determine whether to add ',' after regabs metadata
        if {[dict exists $endpoint_dictionary $endpoint bar] || [dict exists $endpoint_dictionary $endpoint interrupt] || [dict exists $endpoint_dictionary $endpoint firmware]} {
            puts_ipfile $file_name "            \"register_abstraction_name\" : \"[dict get $endpoint_dictionary $endpoint regabs]\","
        } else {
            puts_ipfile $file_name "            \"register_abstraction_name\" : \"[dict get $endpoint_dictionary $endpoint regabs]\""
        }

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Define "bar" metadata
        #----------------------------------------------------------------------------------------------------------------------------------#

        if [dict exists $endpoint_dictionary $endpoint bar] {

            # Check if interrupt or firmware metadata is to be added to determine whether to add ',' after bar metadata
            if {[dict exists $endpoint_dictionary $endpoint interrupt] || [dict exists $endpoint_dictionary $endpoint firmware]} {
                puts_ipfile $file_name "            \"pcie_base_address_register\" : \"[dict get $endpoint_dictionary $endpoint bar]\","
            } else {
                puts_ipfile $file_name "            \"pcie_base_address_register\" : \"[dict get $endpoint_dictionary $endpoint bar]\""
            }

        }

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Define "interrupt" metadata
        #----------------------------------------------------------------------------------------------------------------------------------#

        if [dict exists $endpoint_dictionary $endpoint interrupt] {

            puts_ipfile $file_name "            \"msix_interrupt_start_index\" : \"[dict get $endpoint_dictionary $endpoint interrupt start]\","

            # Check if firmware metadata is to be added to determine whether to add ',' after interrupt metadata
            if {[dict exists $endpoint_dictionary $endpoint firmware]} {
                puts_ipfile $file_name "            \"msix_interrupt_end_index\" : \"[dict get $endpoint_dictionary $endpoint interrupt end]\","
            } else {
                puts_ipfile $file_name "            \"msix_interrupt_end_index\" : \"[dict get $endpoint_dictionary $endpoint interrupt end]\""
            }
        }

        #----------------------------------------------------------------------------------------------------------------------------------#
        # Define "firmware" metadata
        #----------------------------------------------------------------------------------------------------------------------------------#

        if [dict exists $endpoint_dictionary $endpoint firmware] {

            puts_ipfile $file_name "            \"firmware\": {"
            puts_ipfile $file_name "                \"firmware_product_name\" : \"[dict get $endpoint_dictionary $endpoint firmware name]\","
            puts_ipfile $file_name "                \"firmware_branch_name\" : \"[dict get $endpoint_dictionary $endpoint firmware branch]\","

            # Check if minor or revision firmware metadata is to be added to determine whether to add ',' after major metadata
            if {[dict exists $endpoint_dictionary $endpoint firmware minor] || [dict exists $endpoint_dictionary $endpoint firmware rev]} {
                puts_ipfile $file_name "                \"firmware_version_major\" : \"[dict get $endpoint_dictionary $endpoint firmware major]\","
            } else {
                puts_ipfile $file_name "                \"firmware_version_major\" : \"[dict get $endpoint_dictionary $endpoint firmware major]\""
            }

            if {[dict exists $endpoint_dictionary $endpoint firmware minor]} {

                # Check if revision firmware metadata is to be added to determine whether to add ',' after minor metadata
                if {[dict exists $endpoint_dictionary $endpoint firmware rev]} {
                    puts_ipfile $file_name "                \"firmware_version_minor\" : \"[dict get $endpoint_dictionary $endpoint firmware minor]\","
                } else {
                    puts_ipfile $file_name "                \"firmware_version_minor\" : \"[dict get $endpoint_dictionary $endpoint firmware minor]\""
                }

            }
            if {[dict exists $endpoint_dictionary $endpoint firmware rev]} {
                puts_ipfile $file_name "                \"firmware_version_revision\" : \"[dict get $endpoint_dictionary $endpoint firmware rev]\""
            }

            puts_ipfile $file_name "            }"

        }

        #----------------------------------------------------------------------------------------------------------------------------------#
        # End json endpoint metadata definition
        #----------------------------------------------------------------------------------------------------------------------------------#

        if {[dict exists $endpoint_dictionary $endpoint is_last]} {
            puts_ipfile $file_name "        \}"
        } else {
            puts_ipfile $file_name "        \},"
        }
    }

}


# End json addressable_endpoints data_type
puts_ipfile $file_name "    \}"
puts_ipfile $file_name "\}"

close_ipfile $file_name
