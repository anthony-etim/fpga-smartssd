# d52cbaca0ef8cf4fd3d6354deb5066970fb6511d02d18d15835e6014ed847fb0
# (c) Copyright 2018 Xilinx, Inc. All rights reserved.
#
# This file contains confidential and proprietary information
# of Xilinx, Inc. and is protected under U.S. and
# international copyright and other intellectual property
# laws.
#
# DISCLAIMER
# This disclaimer is not a license and does not grant any
# rights to the materials distributed herewith. Except as
# otherwise provided in a valid license issued to you by
# Xilinx, and to the maximum extent permitted by applicable
# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
# (2) Xilinx shall not be liable (whether in contract or tort,
# including negligence, or under any other theory of
# liability) for any loss or damage of any kind or nature
# related to, arising under or in connection with these
# materials, including for any direct, or any indirect,
# special, incidental, or consequential loss or damage
# (including loss of data, profits, goodwill, or any type of
# loss or damage suffered as a result of any action brought
# by a third party) even if such damage or loss was
# reasonably foreseeable or Xilinx had been advised of the
# possibility of the same.
#
# CRITICAL APPLICATIONS
# Xilinx products are not designed or intended to be fail-
# safe, or for use in any application requiring fail-safe
# performance, such as life-support or safety devices or
# systems, Class III medical devices, nuclear facilities,
# applications related to the deployment of airbags, or any
# other applications that could lead to death, personal
# injury, or severe property or environmental damage
# (individually and collectively, "Critical
# Applications"). Customer assumes the sole risk and
# liability of any use of Xilinx products in Critical
# Applications, subject only to applicable laws and
# regulations governing limitations on product liability.
#
# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
# PART OF THIS FILE AT ALL TIMES.
############################################################
# ----------------------------------------------------------------------
# Utility Procedures:
proc find_first_unconnected_intf { intf_pins } {
  foreach i $intf_pins {
    if {[llength [get_bd_intf_nets -quiet -of $i]] == 0} {
      return $i
    }
  }
  return ""
}

proc find_first_unconnected_pin { pins } {
  foreach i $pins {
    if {[llength [get_bd_nets -quiet -of $i]] == 0} {
      return $i
    }
  }
  return ""
}

proc get_clock_key { o } {
  set clock_metadata {}
  foreach p {FREQ_HZ PHASE CLK_DOMAIN} {
    lappend clock_metadata [get_property CONFIG.$p $o]
  }
  set clock_key [join $clock_metadata :]
  return $clock_key
}

proc xil_clog2 { i } {
  set l 1
  while {[expr 1<<$l] <= $i} { incr l }
  return $l
}

proc clog_range { range } {

  if {![regexp {(\d+)(G|T)} $range {} range_value range_type]} {
    send_msg ERROR 1 "Segment range format incorrect: $range"
    return {}
  }

  set clog_range_type_map {G 30 T 40}
  set clog_range_type [dict get $clog_range_type_map $range_type]
#  set clog_range_value [xil_clog2 $range_value]
#  set addr_width [expr $clog_range_value + $clog_range_type]
  set range_high_addr [expr ($range_value*(1<<$clog_range_type))-1]
  set clog_range [xil_clog2 $range_high_addr]
  return $clog_range
}

proc get_config_params { ip } { 
  foreach property [list_property $ip CONFIG.*] { 
    # Removing the CONFIG. prefix from the property
    regsub {^CONFIG\.} $property {} userparam
    dict set config $userparam [get_property $property $ip ]
  }
  return $config
}

proc get_si_clk_keys_info {} {
  set si_clk_keys_info {}
  dbg_puts "----------------------------------------------------------------------"
  dbg_puts "BEGIN: GET_SI_CLK_KEYS_INFO"
  set default_clk_key [get_clock_key [get_bd_ports aclk ]]
  foreach port [get_bd_intf_ports -filter {VLNV==xilinx.com:interface:axis_rtl:1.0}] {
    set intf_obj [find_bd_objs -boundary_type extern -relation CONNECTED_TO $port]
    dbg_puts "port: $port, intf_obj: $intf_obj"
    if {[llength $intf_obj] == 1} {
      dict set si_clk_keys_info [get_property NAME $port] [get_clock_key $intf_obj]
      dbg_puts "  clk_key: [get_clock_key $intf_obj]"
    } else {
      dict set si_clk_keys_info [get_property NAME $port] $default_clk_key
      dbg_puts "  clk_key (default): $default_clk_key"
    }
  }
  dbg_puts "END: GET_SI_CLK_KEYS_INFO"
  dbg_puts "----------------------------------------------------------------------"
  return $si_clk_keys_info
}

proc get_axis_intf_info {} {
  foreach port [get_bd_intf_ports -filter {VLNV==xilinx.com:interface:axis_rtl:1.0}] {
    set port_name [get_property NAME $port]
    set intf_obj [find_bd_objs -boundary_type extern -relation CONNECTED_TO $port]
    if {[llength $intf_obj] == 1} {
      dict set port_info $port_name [get_config_params $intf_obj]
    } else {
      # Get properties of self if no connection.
      dict set port_info $port_name [get_config_params $port]
    }
  }
  return $port_info
}

