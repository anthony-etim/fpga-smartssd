############################################################################################################################################
#
# (c) Copyright 2019 Xilinx, Inc. All rights reserved.
#
# This file contains confidential and proprietary information
# of Xilinx, Inc. and is protected under U.S. and
# international copyright and other intellectual property
# laws.
#
# DISCLAIMER
# This disclaimer is not a license and does not grant any
# rights to the materials distributed herewith. Except as
# otherwise provided in a valid license issued to you by
# Xilinx, and to the maximum extent permitted by applicable
# law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
# WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
# AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
# BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
# INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
# (2) Xilinx shall not be liable (whether in contract or tort,
# including negligence, or under any other theory of
# liability) for any loss or damage of any kind or nature
# related to, arising under or in connection with these
# materials, including for any direct, or any indirect,
# special, incidental, or consequential loss or damage
# (including loss of data, profits, goodwill, or any type of
# loss or damage suffered as a result of any action brought
# by a third party) even if such damage or loss was
# reasonably foreseeable or Xilinx had been advised of the
# possibility of the same.
#
# CRITICAL APPLICATIONS
# Xilinx products are not designed or intended to be fail-
# safe, or for use in any application requiring fail-safe
# performance, such as life-support or safety devices or
# systems, Class III medical devices, nuclear facilities,
# applications related to the deployment of airbags, or any
# other applications that could lead to death, personal
# injury, or severe property or environmental damage
# (individually and collectively, "Critical
# Applications"). Customer assumes the sole risk and
# liability of any use of Xilinx products in Critical
# Applications, subject only to applicable laws and
# regulations governing limitations on product liability.
#
# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
# PART OF THIS FILE AT ALL TIMES.
#
############################################################################################################################################

# Define procedure to convert text range to hex (eg 4k -> 0x0000000000001000)

proc convert_range_to_hex { range_size_bytes } {

    if {$range_size_bytes eq "4k"} {
       return "0x0000000000001000"
    } elseif {$range_size_bytes eq "8k"} {
       return "0x0000000000002000"
    } elseif {$range_size_bytes eq "16k"} {
       return "0x0000000000004000"
    } elseif {$range_size_bytes eq "32k"} {
       return "0x0000000000008000"
    } elseif {$range_size_bytes eq "64k"} {
       return "0x0000000000010000"
    } elseif {$range_size_bytes eq "128k"} {
       return "0x0000000000020000"
    } elseif {$range_size_bytes eq "256k"} {
       return "0x0000000000040000"
    } else {
       return -code error "invalid range $range_size_bytes in convert_range_to_hex procedure"
    }

}

# Define procedure to calculate base address by adding subsystem base and endpoint offset

proc get_endpoint_address { base offset } {

  set decimalbase [expr $base]
  set decimaloffset [expr $offset]
  set decimaladdress [expr {$decimalbase + $decimaloffset}]
  set hexaddress [format %4.16llX $decimaladdress]

  return "0x${hexaddress}"

}

# Define procedure to determine number of address bits for text range (eg 4k -> log2(4096) = 12)

proc convert_range_to_bits { range_size } {

    if {[regexp {([0-9]+)([kMGT]*)} $range_size -> value expo]} {
      if {$expo eq "k"} {
        set range [expr $value * 1024]
      } elseif {$expo eq "M"} {
        set range [expr $value * 1048576]
      } elseif {$expo eq "G"} {
        set range [expr $value * 1073741824]
      } elseif {$expo eq "T"} {
        set range [expr $value * 1099511627776]
      } else {
        set range $value
      }
      return [expr {round([expr log($range)/log(2)])}]
    } else {
      return -code error "Unsupported range $range_size in convert_range_to_bits procedure"
    }

}

# Define procedure to set P2P range metadata based on current project device

proc get_p2p_range_metadata { DEVICE } {

    set device [string tolower $DEVICE]

    if {$device eq "xcu50"} {

        # 8G
        set range "0x0000000200000000"

    } elseif {$device eq "xcu25"} {

        # 6G Memory available, roundup to 8G
        set range "0x0000000200000000"

    } elseif {($device eq "xcu200") || ($device eq "xcu250")} {

        # 64G
        set range "0x0000001000000000"

    } elseif {$device eq "xcu280"} {

        # 40G Memory available, roundup to 64G
        set range "0x0000001000000000"

    } elseif {$device eq "xcu30"} {

      # No Memory on this card
        set range "0x0000000000000000"

    } elseif {($device eq "xcu55c") || ($device eq "xcvu47p")} {

        # 16G
        set range "0x0000000400000000"

    } elseif {($device eq "xcu55n") || ($device eq "xcvu35p")} {

        # 8G
        set range "0x0000000200000000"

    } else {

      return -code error "Unsupported device $device in get_p2p_range_metadata procedure"

    }
}
